<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis主从复制</title>
      <link href="/p/c328eac5.html"/>
      <url>/p/c328eac5.html</url>
      
        <content type="html"><![CDATA[<h2 id="Redis主从复制的概念"><a href="#Redis主从复制的概念" class="headerlink" title="Redis主从复制的概念"></a>Redis主从复制的概念</h2><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090108063.png" alt="img"></p><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master&#x2F;leader)，后者称为从节点(slave&#x2F;follower) ; 数据的复制是单向的，只能由主节点到从节点。Master以写为主，Slave以读为主。</p><p>和Mysql主从复制的原因一样，Redis虽然读取写入的速度都特别快，但是也会产生读压力特别大的情况。为了分担读压力，Redis支持主从复制，Redis的主从结构可以采用一主多从或者级联结构，Redis主从复制可以根据是否是全量分为<strong>全量同步</strong>和<strong>增量同步</strong>。 </p><p>默认情况下，每台redis服务器都是主节点，一个主节点可以有多个从节点，一个从节点只能有一个主节点。单台Redis服务器内存使用不超过20G。</p><p>##主从复制的作用</p><ol><li><strong>读写分离</strong>：<strong>主节点写，从节点读</strong>，提高服务器的读写负载能力</li><li><strong>数据冗余</strong>︰主从复制实现了<strong>数据的热备份，是持久化之外的一种数据冗余方式</strong>。</li><li><strong>故障恢复</strong>︰当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复 ; 实际上是一种服务的冗余。</li><li><strong>负载均衡</strong>︰在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载 ; 尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</li><li><strong>高可用（集群）基石</strong>︰除了上述作用以外，主从复制还是<strong>哨兵和集群</strong>能够实施的基础，因此说主从复制是Redis高可用的基础。</li></ol><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>只用配置从机，因为默认自己是主机。配置不同的配置文件，只需要在从机上配置即可，认主人。</p><ul><li><p>配置文件</p><p>redis-6379.conf redis-6380.conf redis-6381.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">port 6379<span class="comment">#6380 6381</span></span><br><span class="line">daemonize <span class="built_in">yes</span></span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">logfile <span class="string">&quot;6379.log&quot;</span>   <span class="comment">#6380.log 6381.log</span></span><br><span class="line">dbfilename dump6379.rdb  <span class="comment">#dump6380.rdb dump6381.rdb</span></span><br></pre></td></tr></table></figure></li><li><p>从机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[yio@master src]$ ./redis-cli -p 6381</span><br><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:8d2806a006dbbe74942d404121a6ebb77be50dce</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line">127.0.0.1:6381&gt; slaveof 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:6</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:42</span><br><span class="line">slave_repl_offset:42</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:b176050aa3205b4eec01db91306e73f0796dbd2b</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:42</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:15</span><br><span class="line">repl_backlog_histlen:28</span><br></pre></td></tr></table></figure></li><li><p>主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:2779994fcc01f1aac5b578702c16f8c31c05c038</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=14,lag=0</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=wait_bgsave,offset=0,lag=0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:b176050aa3205b4eec01db91306e73f0796dbd2b</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:14</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:14</span><br></pre></td></tr></table></figure></li><li><p>以上只是命令式的暂时配置，持久配置需要在配置文件里面进行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line">masterauth &lt;master-password&gt;  <span class="comment">#主机密码</span></span><br></pre></td></tr></table></figure></li><li><p>主机写，从机读。主机内容保存到从机。</p></li></ul><h2 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h2><h3 id="全量复制"><a href="#全量复制" class="headerlink" title="全量复制"></a>全量复制</h3><p><strong>全量同步</strong></p><p>Redis全量复制一般发生在Slave初始化阶段，这时Slave需要将Master上的所有数据都复制一份。具体步骤如下： </p><ul><li>从服务器连接主服务器，发送SYNC命令； </li><li>主服务器接收到SYNC命名后，开始执行BGSAVE命令生成RDB文件并使用缓冲区记录此后执行的所有写命令； </li><li>主服务器BGSAVE执行完后，向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令； </li><li>从服务器收到快照文件后丢弃所有旧数据，载入收到的快照； </li><li>主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令； </li><li>从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令；</li></ul><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090108064.jpeg" alt="img"></p><p>###增量复制</p><p>Redis增量复制是指Slave初始化后开始正常工作时主服务器发生的写操作同步到从服务器的过程。 </p><p>增量复制的过程主要是主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行收到的写命令</p><p>###<strong>Redis主从同步策略</strong></p><p>主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。slave 在任何时候都可以发起全量同步。redis 策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。</p><p><strong>注意点：</strong>如果多个Slave断线了，需要重启的时候，因为只要Slave启动，就会发送sync请求和主机全量同步，当多个同时出现的时候，可能会导致Master IO剧增宕机。</p><h3 id="链式"><a href="#链式" class="headerlink" title="链式"></a>链式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A -&gt; B: A是B的master</span><br><span class="line">note right of B: B是Slave</span><br><span class="line">B -&gt; C: B是C的master（相对）</span><br><span class="line">note right of C: C是Slave</span><br></pre></td></tr></table></figure><p>上图中B和C都是从机的，只有A是主机</p><h3 id="故障"><a href="#故障" class="headerlink" title="故障"></a>故障</h3><ul><li>从节点故障时，只用给连在上面的客户端连接别的从节点即可</li><li>主节点故障时，我们要使用客户端在某个从节点使用<code>salveof no one</code>,使该从节点变成主节点，之后在其他的从节点执行<code>salveof new master</code>，连接新的主节点，同时也要迁移原从节点只读操作</li><li>哨兵系统可以自动</li></ul><h2 id="Redis哨兵（sentinel）模式"><a href="#Redis哨兵（sentinel）模式" class="headerlink" title="Redis哨兵（sentinel）模式"></a>Redis哨兵（sentinel）模式</h2><p>redis的哨兵模式，就是用于在一主多从的集群环境下，如果主服务器宕机了，它会自动的将从服务器中的一台设为新的master，并且将其余的slave的配置文件自动修改，这样就切换出一套新的主从服务，不需要人工干预，且不会影响服务的使用。</p><p>哨兵是一个独立于主从服务之外的服务，它也是一个<strong>集群服务</strong>，也就是说一个系统会使用过个哨兵进行监控，各个哨兵之间也会彼此监控，形成监控网络。哨兵实例会不断给主服务器<strong>发送Ping命令</strong>，主服务器在收到命令后，返回一个有效回复，这样哨兵实例认为服务器是正常的。</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090108065.webp" alt="img"></p><h3 id="主观下线"><a href="#主观下线" class="headerlink" title="主观下线"></a>主观下线</h3><p>如果，哨兵一号在指定的时间内（可配置）没有收到主机的回复消息，就会认为它已经下线，即使客观上它并没有下线，可能只是因为某些原因导致给哨兵一号的回复没有抵达。这就被叫做主观下线SDOWN。</p><h3 id="客观下线"><a href="#客观下线" class="headerlink" title="客观下线"></a>客观下线</h3><p>哨兵二号也发送了Ping命令，同样也没有收到回复，哨兵二号也会将主服务器标记为SDOWN。这个时候，3个哨兵中有2个哨兵上报了SDOWN，哨兵们在彼此交流之后，认为已经有足够数量（这里的足够数量是可配置的，一般是哨兵个数的一半加1，比如3个哨兵则就设置为2）的实例证明该服务已经不可用，因此，哨兵实例会将该服务器标记为客观下线ODOWN。</p><p>当哨兵实例将服务标记为客观下线时，会进行一次选举。在剩下的从服务器实例中，选出一个作为主节点，并同时修改其余从服务器的配置文件，将新的主节点作为数据同步的来源，然后重新启动服务，完成切换。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol><li><p>哨兵配置文件 <code>sentinel.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sentinel monitor 被监视的名称 host port 1</span></span><br><span class="line">sentinel monitor myredis 127.0.0.1 6379 1</span><br><span class="line"><span class="comment"># 1 表示主机挂了之后，slave投票看谁接替成为主机，票数最多的成为主机</span></span><br></pre></td></tr></table></figure></li><li><p>启动哨兵</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel sentinel.conf</span><br></pre></td></tr></table></figure></li></ol><h3 id="SpringBoot配置一主多从-哨兵"><a href="#SpringBoot配置一主多从-哨兵" class="headerlink" title="SpringBoot配置一主多从+哨兵"></a>SpringBoot配置一主多从+哨兵</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line"><span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">password:</span> </span><br><span class="line"><span class="comment">#连接超时</span></span><br><span class="line"><span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line"><span class="attr">database:</span> <span class="number">16</span></span><br><span class="line"><span class="attr">sentinnel:</span> </span><br><span class="line"><span class="attr">master:</span> <span class="string">mymaster</span></span><br><span class="line"><span class="attr">nodes:</span> <span class="comment">#哨兵ip:端口</span></span><br></pre></td></tr></table></figure><blockquote><p>参考：</p><ul><li><a href="https://www.jianshu.com/p/06ab9daf921d">Redis哨兵（Sentinel）模式 - 简书 (jianshu.com)</a></li><li><a href="https://www.51cto.com/article/712529.html">通俗易懂讲解Redis的哨兵模式-51CTO.COM</a></li><li><a href="https://zhuanlan.zhihu.com/p/354720754">Redis专题：深入解读哨兵模式 - 知乎 (zhihu.com)</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis配置</title>
      <link href="/p/815cc3a1.html"/>
      <url>/p/815cc3a1.html</url>
      
        <content type="html"><![CDATA[<h2 id="Redis-conf详解"><a href="#Redis-conf详解" class="headerlink" title="Redis.conf详解"></a>Redis.conf详解</h2><ul><li><p>单位注意事项：当需要内存大小时，可以指定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Note on units: when memory size is needed, it is possible to specify</span></span><br><span class="line"><span class="comment"># it in the usual form of 1k 5GB 4M and so forth:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1k =&gt; 1000 bytes</span></span><br><span class="line"><span class="comment"># 1kb =&gt; 1024 bytes</span></span><br><span class="line"><span class="comment"># 1m =&gt; 1000000 bytes</span></span><br><span class="line"><span class="comment"># 1mb =&gt; 1024*1024 bytes</span></span><br><span class="line"><span class="comment"># 1g =&gt; 1000000000 bytes</span></span><br><span class="line"><span class="comment"># 1gb =&gt; 1024*1024*1024 bytes</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span></span><br></pre></td></tr></table></figure></li><li><p>包含：可以组合多个config文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############################### INCLUDES ###################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include one or more other config files here.  This is useful if you</span></span><br><span class="line"><span class="comment"># have a standard template that goes to all Redis servers but also need</span></span><br><span class="line"><span class="comment"># to customize a few per-server settings.  Include files can include</span></span><br><span class="line"><span class="comment"># other files, so use this wisely.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Notice option &quot;include&quot; won&#x27;t be rewritten by command &quot;CONFIG REWRITE&quot;</span></span><br><span class="line"><span class="comment"># from admin or Redis Sentinel. Since Redis always uses the last processed</span></span><br><span class="line"><span class="comment"># line as value of a configuration directive, you&#x27;d better put includes</span></span><br><span class="line"><span class="comment"># at the beginning of this file to avoid overwriting config change at runtime.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If instead you are interested in using includes to override configuration</span></span><br><span class="line"><span class="comment"># options, it is better to use include as the last line.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># include .\path\to\local.conf</span></span><br><span class="line"><span class="comment"># include c:\path\to\other.conf</span></span><br></pre></td></tr></table></figure></li><li><p>网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1 <span class="comment">#绑定的ip</span></span><br><span class="line">port 6379 <span class="comment">#端口号</span></span><br><span class="line">protected-mode <span class="comment">#保护模式</span></span><br><span class="line">*<span class="comment">#rotected-mode 是为了禁止公网访问redis cache，加强redis安全的。</span></span><br><span class="line"><span class="comment">#它启用的条件，有两个：</span></span><br><span class="line"><span class="comment">#1） 没有bind IP</span></span><br><span class="line"><span class="comment">#2） 没有设置访问密码</span></span><br></pre></td></tr></table></figure></li><li><p>通用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">daemonize <span class="built_in">yes</span> <span class="comment">#守护进程</span></span><br><span class="line">pidfile /var/run/redis_6379.pid <span class="comment">#如果以后台的方式运行就需要一个pid文件</span></span><br><span class="line"><span class="comment"># 日志功能</span></span><br><span class="line"><span class="comment"># Specify the server verbosity level.</span></span><br><span class="line"><span class="comment"># This can be one of:</span></span><br><span class="line"><span class="comment"># debug (a lot of information, useful for development/testing)</span></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="comment"># notice (moderately verbose, what you want in production probably)  生产环境</span></span><br><span class="line"><span class="comment"># warning (only very important / critical messages are logged)   重要的关键的</span></span><br><span class="line">loglevel notice</span><br><span class="line"><span class="comment"># Specify the log file name. Also &#x27;stdout&#x27; can be used to force</span></span><br><span class="line"><span class="comment"># Redis to log on the standard output. </span></span><br><span class="line">logfile <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># Set the number of databases. The default database is DB 0, you can select</span></span><br><span class="line"><span class="comment"># a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span></span><br><span class="line"><span class="comment"># dbid is a number between 0 and &#x27;databases&#x27;-1</span></span><br><span class="line">databases 16</span><br></pre></td></tr></table></figure></li><li><p>快照（SNAPSHOTTING）：</p><p>做持久化的时候会用到，在规定时间内执行了多少次操作就会持久化到文件 .rdb .aof</p><p>因为是内存数据库，如果没有持久化，数据就会断电即失</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################ SNAPSHOTTING  ################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Save the DB on disk:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   save &lt;seconds&gt; &lt;changes&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Will save the DB if both the given number of seconds and the given</span></span><br><span class="line"><span class="comment">#   number of write operations against the DB occurred.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   In the example below the behaviour will be to save:</span></span><br><span class="line"><span class="comment">#   after 900 sec (15 min) if at least 1 key changed</span></span><br><span class="line"><span class="comment">#   after 300 sec (5 min) if at least 10 keys changed</span></span><br><span class="line"><span class="comment">#   after 60 sec if at least 10000 keys changed</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Note: you can disable saving completely by commenting out all &quot;save&quot; lines.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   It is also possible to remove all the previously configured save</span></span><br><span class="line"><span class="comment">#   points by adding a save directive with a single empty string argument</span></span><br><span class="line"><span class="comment">#   like in the following example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   save &quot;&quot;</span></span><br><span class="line"><span class="comment">#持久化时 自己定义</span></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#持久化失败是否会继续工作</span></span><br><span class="line">stop-writes-on-bgsave-error <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否压缩rdb文件 需要消耗一些cpu资源</span></span><br><span class="line">rdbcompression <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The DB will be written inside this directory, with the filename specified</span></span><br><span class="line"><span class="comment"># above using the &#x27;dbfilename&#x27; configuration directive.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># The Append Only File will also be created inside this directory.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Note that you must specify a directory here, not a file name.</span></span><br><span class="line"><span class="comment">#RDB 文件的保存目录</span></span><br><span class="line"><span class="built_in">dir</span> ./</span><br></pre></td></tr></table></figure></li><li><p>复制（REPLICATION）</p><p>见下文主从复制</p></li><li><p>安全 （SECURITY）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> requirepass 123456</span><br><span class="line"> </span><br><span class="line"> <span class="comment">#在命令行设置密码</span></span><br><span class="line"> config <span class="built_in">set</span> requirepass <span class="string">&quot;123456&quot;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># It is possible to change the name of dangerous commands in a shared</span></span><br><span class="line"><span class="comment"># environment. For instance the CONFIG command may be renamed into something</span></span><br><span class="line"><span class="comment"># hard to guess so that it will still be available for internal-use tools</span></span><br><span class="line"><span class="comment"># but not available for general clients.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line">rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span><br><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>限制（LIMITS）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">maxclients 10000 <span class="comment">#</span></span><br><span class="line">maxmemory &lt;bytes&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#MAXMEMORY POLICY: how Redis will select what to remove when maxmemory is reached. You can select among five behaviors:</span></span><br><span class="line"><span class="comment">#内存到达上限之后的处理操作</span></span><br><span class="line"><span class="comment"># volatile-lru -&gt; remove the key with an expire set using an LRU algorithm 使用 LRU 算法删除设置了过期时间的key</span></span><br><span class="line"><span class="comment"># allkeys-lru -&gt; remove any key according to the LRU algorithm   根据 LRU 算法删除任意键</span></span><br><span class="line"><span class="comment"># volatile-random -&gt; remove a random key with an expire set   删除带有过期集的随机key</span></span><br><span class="line"><span class="comment"># allkeys-random -&gt; remove a random key, any key</span></span><br><span class="line"><span class="comment"># volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL )删除过期时间最近的key（次要 TTL）</span></span><br><span class="line"><span class="comment"># noeviction -&gt; don&#x27;t expire at all, just return an error on write operations  根本不会过期，只是在写操作时返回一个错误</span></span><br><span class="line"><span class="comment">#The default is:</span></span><br><span class="line">maxmemory-policy noeviction</span><br></pre></td></tr></table></figure></li><li><p>APPEND ONLY MODE (aof配置)</p></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">appendonly no   <span class="comment">#默认不开启 默认使用RDB方式持久化 大部分rdb够用了</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span> <span class="comment">#持久化的文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync always # 每次修改都会 sync 消耗性能</span></span><br><span class="line">appendfsync everysec <span class="comment"># 每一秒都会执行一次sync 可能会丢失这1秒的数据</span></span><br><span class="line"><span class="comment"># appendfsync no # 不执行 sync， 这个时候操作系统自己同步数据，速度最快 </span></span><br></pre></td></tr></table></figure><h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><blockquote><p><a href="https://www.redis.com.cn/redis-persistence.html">Redis 持久化</a></p></blockquote><p>解决因为是内存数据库断电即失的问题，提供一个数据的持久化保存的功能</p><p>RDB，简而言之，就是在不同的时间点，将 redis 存储的数据生成快照并存储到磁盘等介质上；</p><p>AOF，则是换了一个角度来实现持久化，那就是将 redis 执行过的所有写指令记录下来，在下次 redis 重新启动时，只要把这些写指令从前到后再重复执行一遍，就可以实现数据恢复了。</p><p>其实 RDB 和 AOF 两种方式也可以同时使用，在这种情况下，如果 redis 重启的话，则会优先采用 AOF 方式来进行数据恢复，这是因为 AOF 方式的数据恢复完整度更高。</p><h3 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h3><ul><li><p>是什么</p><p>RDB 方式，是将 redis 某一时刻的数据持久化到磁盘中，是一种快照式的持久化方法。默认的持久化方式。</p><p>redis 在进行数据持久化的过程中，会先将数据写入到一个<strong>临时文件</strong>中，待持久化过程都结束了，才会用这个临时文件替换上次持久化好的文件。正是这种特性，让我们可以随时来进行备份，因为快照文件总是完整可用的。</p><p><strong>优点：</strong></p><ul><li><p><strong>对于 RDB 方式，redis 会单独创建（fork）一个子进程来进行持久化，而主进程是不会进行任何 IO 操作的，这样就确保了 redis 极高的性能。</strong></p></li><li><p>如果需要进行<strong>大规模数据</strong>的恢复，且对于数据恢复的完整性不是非常敏感，那 RDB 方式要比 AOF 方式<strong>更加的高效</strong>。</p></li></ul><p><strong>缺点：</strong></p><ul><li>虽然 RDB 有不少优点，但它的缺点也是不容忽视的。<strong>如果你对数据的完整性非常敏感，那么 RDB 方式就不太适合你，</strong>因为即使你每 5 分钟都持久化一次，当 redis 故障时，仍然会有近 5 分钟的数据丢失。</li><li>需要一定的时间修改。</li><li>fork进程的时候会占用一定的内存空间。</li></ul></li><li><p>执行条件</p><ul><li><p>save的规则满足的条件下 就会生成rdb文件</p></li><li><p>执行flushall命令，也会触发rdb规则</p></li><li><p>退出redis，也会产生rdb文件</p><p>备份就自动生成一个dump.rdb</p></li></ul></li><li><p>如何恢复rdb文件</p><ul><li><p>只需要将rdb文件放到redis启动目录就行，redis启动的时候hi自动检查dump.rdb文件来恢复其中的数据。</p></li><li><p>查看需要存在的位置：<code>config get dir</code></p><blockquote><p>几乎它的默认配置就足够使用了</p></blockquote></li></ul></li><li><p>&#96;&#96;&#96;bash</p><h1 id="Compress-string-objects-using-LZF-when-dump-rdb-databases-是否使用压缩（compress）"><a href="#Compress-string-objects-using-LZF-when-dump-rdb-databases-是否使用压缩（compress）" class="headerlink" title="Compress string objects using LZF when dump .rdb databases? 是否使用压缩（compress）"></a>Compress string objects using LZF when dump .rdb databases? 是否使用压缩（compress）</h1><h1 id="For-default-that’s-set-to-‘yes’-as-it’s-almost-always-a-win"><a href="#For-default-that’s-set-to-‘yes’-as-it’s-almost-always-a-win" class="headerlink" title="For default that’s set to ‘yes’ as it’s almost always a win."></a>For default that’s set to ‘yes’ as it’s almost always a win.</h1><h1 id="If-you-want-to-save-some-CPU-in-the-saving-child-set-it-to-‘no’-but-关掉之后提高性能但是消耗空间"><a href="#If-you-want-to-save-some-CPU-in-the-saving-child-set-it-to-‘no’-but-关掉之后提高性能但是消耗空间" class="headerlink" title="If you want to save some CPU in the saving child set it to ‘no’ but  关掉之后提高性能但是消耗空间"></a>If you want to save some CPU in the saving child set it to ‘no’ but  关掉之后提高性能但是消耗空间</h1><h1 id="the-dataset-will-likely-be-bigger-if-you-have-compressible-values-or-keys"><a href="#the-dataset-will-likely-be-bigger-if-you-have-compressible-values-or-keys" class="headerlink" title="the dataset will likely be bigger if you have compressible values or keys."></a>the dataset will likely be bigger if you have compressible values or keys.</h1><p>rdbcompression yes</p><h1 id="Since-version-5-of-RDB-a-CRC64-checksum-is-placed-at-the-end-of-the-file-是否关闭CRC校验和"><a href="#Since-version-5-of-RDB-a-CRC64-checksum-is-placed-at-the-end-of-the-file-是否关闭CRC校验和" class="headerlink" title="Since version 5 of RDB a CRC64 checksum is placed at the end of the file.  是否关闭CRC校验和"></a>Since version 5 of RDB a CRC64 checksum is placed at the end of the file.  是否关闭CRC校验和</h1><h1 id="This-makes-the-format-more-resistant-to-corruption-but-there-is-a-performance-确保准确性-但是消耗性能"><a href="#This-makes-the-format-more-resistant-to-corruption-but-there-is-a-performance-确保准确性-但是消耗性能" class="headerlink" title="This makes the format more resistant to corruption but there is a performance  确保准确性 但是消耗性能"></a>This makes the format more resistant to corruption but there is a performance  确保准确性 但是消耗性能</h1><h1 id="hit-to-pay-around-10-when-saving-and-loading-RDB-files-so-you-can-disable-it"><a href="#hit-to-pay-around-10-when-saving-and-loading-RDB-files-so-you-can-disable-it" class="headerlink" title="hit to pay (around 10%) when saving and loading RDB files, so you can disable it"></a>hit to pay (around 10%) when saving and loading RDB files, so you can disable it</h1><h1 id="for-maximum-performances"><a href="#for-maximum-performances" class="headerlink" title="for maximum performances."></a>for maximum performances.</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="RDB-files-created-with-checksum-disabled-have-a-checksum-of-zero-that-will"><a href="#RDB-files-created-with-checksum-disabled-have-a-checksum-of-zero-that-will" class="headerlink" title="RDB files created with checksum disabled have a checksum of zero that will"></a>RDB files created with checksum disabled have a checksum of zero that will</h1><h1 id="tell-the-loading-code-to-skip-the-check"><a href="#tell-the-loading-code-to-skip-the-check" class="headerlink" title="tell the loading code to skip the check."></a>tell the loading code to skip the check.</h1><p>rdbchecksum yes</p><h1 id="The-filename-where-to-dump-the-DB"><a href="#The-filename-where-to-dump-the-DB" class="headerlink" title="The filename where to dump the DB"></a>The filename where to dump the DB</h1><h1 id="持久化文件名"><a href="#持久化文件名" class="headerlink" title="持久化文件名"></a>持久化文件名</h1><p>dbfilename dump.rdb</p><h1 id="The-working-directory"><a href="#The-working-directory" class="headerlink" title="The working directory."></a>The working directory.</h1><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="The-DB-will-be-written-inside-this-directory-with-the-filename-specified"><a href="#The-DB-will-be-written-inside-this-directory-with-the-filename-specified" class="headerlink" title="The DB will be written inside this directory, with the filename specified"></a>The DB will be written inside this directory, with the filename specified</h1><h1 id="above-using-the-‘dbfilename’-configuration-directive"><a href="#above-using-the-‘dbfilename’-configuration-directive" class="headerlink" title="above using the ‘dbfilename’ configuration directive."></a>above using the ‘dbfilename’ configuration directive.</h1><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><h1 id="The-Append-Only-File-will-also-be-created-inside-this-directory"><a href="#The-Append-Only-File-will-also-be-created-inside-this-directory" class="headerlink" title="The Append Only File will also be created inside this directory."></a>The Append Only File will also be created inside this directory.</h1><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><h1 id="Note-that-you-must-specify-a-directory-here-not-a-file-name"><a href="#Note-that-you-must-specify-a-directory-here-not-a-file-name" class="headerlink" title="Note that you must specify a directory here, not a file name."></a>Note that you must specify a directory here, not a file name.</h1><h1 id="持久化文件目录"><a href="#持久化文件目录" class="headerlink" title="持久化文件目录"></a>持久化文件目录</h1><p>dir .&#x2F;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">### AOF（Append Only File）</span><br><span class="line"></span><br><span class="line">- 是什么</span><br><span class="line"></span><br><span class="line">  AOF，英文是 Append Only File，即**只允许追加不允许改写的文件**。</span><br><span class="line"></span><br><span class="line">  AOF 方式是将**执行过的写指令记录下来**，在数据恢复时按照从前到后的顺序再将指令都执行一遍，就这么简单。</span><br><span class="line"></span><br><span class="line">  我们通过配置 redis.conf 中的 `appendonly yes ` 就可以打开 AOF 功能。如果有写操作（如 SET 等），redis 就会被追加到 AOF 文件的末尾。</span><br><span class="line"></span><br><span class="line">  **优点：**</span><br><span class="line"></span><br><span class="line">  - 默认的 AOF 持久化策略是每秒钟 `fsync ` 一次（fsync 是指把缓存中的写指令记录到磁盘中），因为在这种情况下，redis 仍然可以保持很好的处理性能，即使 redis 故障，也只会丢失最近 1 秒钟的数据。</span><br><span class="line"></span><br><span class="line">    ```bash</span><br><span class="line">    # appendfsync always # 每次修改都会 sync 消耗性能</span><br><span class="line">    appendfsync everysec # 每一秒都会执行一次sync 可能会丢失这1秒的数据</span><br><span class="line">    # appendfsync no # 不执行 sync， 这个时候操作系统自己同步数据，速度最快 </span><br></pre></td></tr></table></figure><ul><li><p><strong>良好的修复能力</strong>。如果在追加日志时，恰好遇到磁盘空间满、inode 满或断电等情况导致日志写入不完整，也没有关系，<strong>redis 提供了 redis-check-aof 工具</strong>，可以用来进行<strong>日志</strong>修复。</p><p><code>redis-check-aof --fix appendonly.aof</code></p><blockquote><p>因为采用了追加方式，如果不做任何处理的话，AOF 文件会变得越来越大，为此，<strong>redis 提供了 AOF 文件重写（rewrite）机制，即当 AOF 文件的大小超过所设定的阈值时，redis 就会启动 AOF 文件的内容压缩，只保留可以恢复数据的最小指令集</strong>。举个例子或许更形象，假如我们调用了 100 次 INCR 指令，在 AOF 文件中就要存储 100 条指令，但这明显是很低效的，完全可以把这 100 条指令合并成一条 SET 指令，这就是重写机制的原理。</p><p>在进行 AOF 重写时，仍然是采用先写临时文件，全部完成后再替换的流程，所以断电、磁盘满等问题都不会影响 AOF 文件的可用性，这点大家可以放心。</p></blockquote></li><li><p>AOF 方式的另一个好处，我们通过一个“场景再现”来说明。某同学在操作 redis 时，不小心执行了 FLUSHALL，导致 redis 内存中的数据全部被清空了，这是很悲剧的事情。不过这也不是世界末日，只要 redis 配置了 AOF 持久化方式，且 AOF 文件还没有被重写（rewrite），我们就可以用最快的速度暂停 redis 并编辑 AOF 文件，将最后一行的 FLUSHALL 命令删除，然后重启 redis，就可以恢复 redis 的所有数据到 FLUSHALL 之前的状态了。是不是很神奇，这就是 AOF 持久化方式的好处之一。但是如果 AOF 文件已经被重写了，那就无法通过这种方法来恢复数据了。</p></li></ul><p><strong>缺点：</strong></p><ul><li><strong>在同样数据规模的情况下，AOF 文件要比 RDB 文件的体积大。</strong></li><li><strong>AOF 方式的恢复速度也要慢于 RDB 方式。</strong></li><li>运行效率也没有 RDB 好，所以默认使用 RDB 的。</li></ul><p>如果你直接执行 <code>BGREWRITEAOF</code> 命令，那么 redis 会生成一个全新的 AOF 文件，其中便包括了可以恢复现有数据的最少的命令集。</p><p>如果运气比较差，AOF 文件出现了被写坏的情况，也不必过分担忧，redis 并不会贸然加载这个有问题的 AOF 文件，而是报错退出。<strong>这时可以通过以下步骤来修复出错的文件</strong>：</p><ol><li>备份被写坏的 AOF 文件\ </li><li>运行 redis-check-aof –fix 进行修复\ </li><li>用 diff -u 来看下两个文件的差异，确认问题点\</li><li>重启 redis，加载修复后的 AOF 文件</li></ol></li></ul><h3 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h3><p>解决aof文件越来越大的问题</p><p>开始前，<strong>redis 会创建（fork）一个“重写子进程”，</strong>这个子进程会<strong>首先读取现有的 AOF 文件</strong>，并将其包含的指令进行<strong>分析压缩</strong>并<strong>写入到一个临时文件</strong>中。</p><p>与此同时，<strong>主工作进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的 AOF 文件中</strong>，这样做是保证原有的 AOF 文件的可用性，避免在重写过程中出现意外。</p><p>当“重写子进程”完成重写工作后，它会给父进程发一个信号，<strong>父进程收到信号</strong>后就会<strong>将内存中缓存的写指令追加到新 AOF 文件</strong>中。</p><p>当追加结束后，redis 就会用新 AOF 文件来代替旧 AOF 文件，之后再有新的写指令，就都会追加到新的 AOF 文件中了。</p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>其实 RDB 和 AOF 两种方式也可以同时使用，在这种情况下，如果 redis 重启的话，则会优先采用 AOF 方式来进行数据恢复，这是因为 AOF 方式的数据恢复完整度更高。</p><p>如果你没有数据持久化的需求，也完全可以关闭 RDB 和 AOF 方式，这样的话，redis 将变成一个纯内存数据库，就像 memcache 一样。</p><p>对于我们应该选择 RDB 还是 AOF，官方的建议是两个同时使用。这样可以提供更可靠的持久化方案。</p><p>双选时，<strong>RDB可以作为备份</strong>，只需要在slave上每十五分钟保存一次即可。AOF可以保证丢失的数据不至于太大，但是默认的64M就会重写的机制带来了较大的IO，可以将其修改到5G以上，默认超过原大小100%大小重写可以改到适当的数值。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis发布订阅</title>
      <link href="/p/bf72778.html"/>
      <url>/p/bf72778.html</url>
      
        <content type="html"><![CDATA[<h2 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h2><blockquote><p>官网很简介了已经。</p><p>订阅进阶：消息队列</p></blockquote><p>Redis 发布订阅(pub&#x2F;sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</p><p>Redis 客户端可以订阅任意数量的频道。</p><p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090108268.png" alt="pubsub1"></p><p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090108269.png" alt="pubsub2"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以下实例演示了发布订阅是如何工作的。在我们实例中我们创建了订阅频道名为 <strong>redisChat</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SUBSCRIBE redisChat </span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1)<span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;redisChat&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><p>现在，我们先重新开启个 redis 客户端，然后在同一个频道 redisChat 发布两次消息，订阅者就能接收到消息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; PUBLISH redisChat <span class="string">&quot;Redis is a great caching technique&quot;</span> </span><br><span class="line">(<span class="built_in">integer</span>) 1 </span><br><span class="line">redis 127.0.0.1:6379&gt; PUBLISH redisChat <span class="string">&quot;Learn redis by w3cschool.cc&quot;</span> </span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 订阅者的客户端会显示如下消息</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;redisChat&quot;</span></span><br><span class="line">3) <span class="string">&quot;Redis is a great caching technique&quot;</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;redisChat&quot;</span></span><br><span class="line">3) <span class="string">&quot;Learn redis by w3cschool.cc&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Redis-发布订阅命令"><a href="#Redis-发布订阅命令" class="headerlink" title="Redis 发布订阅命令"></a>Redis 发布订阅命令</h2><p>下表列出了 redis 发布订阅常用命令：</p><table><thead><tr><th align="left">序号</th><th align="left">命令及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.redis.net.cn/order/3632.html">PSUBSCRIBE pattern [pattern …]</a> 订阅一个或多个符合给定模式的频道。</td></tr><tr><td align="left">2</td><td align="left">[PUBSUB subcommand <a href="https://www.redis.net.cn/order/3633.html">argument [argument …]]</a> 查看订阅与发布系统状态。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.redis.net.cn/order/3634.html">PUBLISH channel message</a> 将信息发送到指定的频道。</td></tr><tr><td align="left">4</td><td align="left">[PUNSUBSCRIBE <a href="https://www.redis.net.cn/order/3635.html">pattern [pattern …]]</a> 退订所有给定模式的频道。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.redis.net.cn/order/3636.html">SUBSCRIBE channel [channel …]</a> 订阅给定的一个或多个频道的信息。</td></tr><tr><td align="left">6</td><td align="left">[UNSUBSCRIBE <a href="https://www.redis.net.cn/order/3637.html">channel [channel …]]</a> 指退订给定的频道。</td></tr></tbody></table><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>每个 Redis 服务器进程都维持着一个表示服务器状态的 redis.h&#x2F;redisServer 结构， </p><p>结构的 pubsub_channels 属性是一个字典， 这个字典就用于保存订阅频道的信息，其中，字典的键为正在被订阅的频道， 而<strong>字典的值则是一个链表</strong>， 链表中保存了所有订阅这个频道的客户端。</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090108270.png" alt="img"></p><p>当调用 PUBLISH channel message 命令， 程序首先根据 channel 定位到字典的键， 然后将信息发送给字典值链表中的所有客户端。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis缓存穿透和雪崩</title>
      <link href="/p/e911dea2.html"/>
      <url>/p/e911dea2.html</url>
      
        <content type="html"><![CDATA[<h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>当查询Redis中没有的数据时，该查询会下沉到数据库层，同时数据库层也没有该数据，本次查询失败。当这种情况大量出现或被恶意攻击时，接口的访问全部透过Redis访问数据库，而数据库中也没有这些数据，我们称这种现象为”缓存穿透”。当用户很多，缓存都没有命中时，请求持久层将给数据库造成很大的压力。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">客户端 -&gt; Redis: 在redis中查询数据</span><br><span class="line">Redis -&gt; 数据库层: redis中未查询到，前往数据库层</span><br><span class="line">note right of 数据库层: 数据库层也没有数据，查询失败</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>在接口访问层对用户做校验，如接口传参、登陆状态、n秒内访问接口的次数</li><li>利用<strong>布隆过滤器</strong>，将数据库层有数据的key存储在位数组中，以判断访问的key在底层数据库是否存在。布隆过滤器有误判率，虽然不能完全避免数据穿透的现象，但已经可以将99.99%的穿透查询给屏蔽在Redis层了，极大的降低了底层数据库的压力，减少了资源浪费。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090109957.png" alt="img"></p><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>缓存击穿和缓存穿透从名词上可能很难区分开来，它们的区别是：穿透表示底层数据库没有数据且缓存内也没有数据，<strong>击穿表示底层数据库有数据而缓存内没有数据</strong>。当热点数据key从缓存内失效时，大量访问同时请求这个数据，就会将查询下沉到数据库层，此时数据库层的负载压力会骤增，我们称这种现象为”缓存击穿”。</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>延长热点key的过期时间或者设置永不过期，如排行榜，首页等一定会有高并发的接口；</li><li><strong>利用互斥锁</strong>保证同一时刻只有一个客户端可以查询底层数据库的这个数据，一旦查到数据就缓存至Redis内，避免其他大量请求同时穿过Redis访问底层数据库；</li></ul><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>缓存雪崩是缓存击穿的”大面积”版，缓存击穿是数据库缓存到Redis内的热点数据失效导致大量并发查询穿过redis直接击打到底层数据库，而缓存雪崩是指Redis中大量的key几乎同时过期，然后大量并发查询穿过redis击打到底层数据库上，此时数据库层的负载压力会骤增，我们称这种现象为”缓存雪崩”。</p><p>实际上缓存雪崩比缓存击穿的发生率更高，因为同时超大并发量访问同一个过时的key相比于大量的key过期的同时又收到大量访问的情况更容易发生。</p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><p>Redis高可用，多整几个Redis，搭建集群。</p></li><li><p><strong>限流降级：</strong>在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量，比如对某个key只允许一个线程查询数据和写缓存，其他线程的等待。</p></li><li><p>进行<strong>缓存预热</strong></p></li><li><p>在可接受的时间范围内随机设置key的过期时间，<strong>分散key的过期时间</strong>，以防止大量的key在同一时刻过期；</p></li><li><p>对于一定要在固定时间让key失效的场景，可以在固定的失效时间时在<strong>接口服务端设置随机延时</strong>，<strong>将请求的时间打散</strong>，让一部分查询先将数据缓存起来；</p></li><li><p>延长热点key的过期时间或者设置永不过期，这一点和缓存击穿中的方案一样；</p></li></ul><h2 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h2><p>缓存预热如字面意思，当系统上线时，缓存内还没有数据，如果直接提供给用户使用，每个请求都会穿过缓存去访问底层数据库，如果并发大的话，很有可能在上线当天就会宕机，因此我们需要在上线前先将数据库内的热点数据缓存至Redis内再提供出去使用，这种操作就成为”缓存预热”。</p><p>缓存预热的实现方式有很多，比较通用的方式是写个批任务，在启动项目时或定时去触发将底层数据库内的热点数据加载到缓存内。</p><h2 id="缓存更新"><a href="#缓存更新" class="headerlink" title="缓存更新"></a>缓存更新</h2><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><p><strong>缓存服务（Redis）</strong>和<strong>数据服务（底层数据库）</strong>是相互独立且异构的系统，在更新缓存或更新数据的时候无法做到<strong>原子性的同时更新两边</strong>的数据，因此在<strong>并发读写或第二步操作</strong>异常时会遇到各种数据不一致的问题。如何解决并发场景下更新操作的双写一致是缓存系统的一个重要知识点。</p><p>第二步操作异常：缓存和数据的操作顺序中，第二个动作报错。如数据库被更新， 此时失效缓存的时候出错，缓存内数据仍是旧版本；</p><h3 id="更新方法"><a href="#更新方法" class="headerlink" title="更新方法"></a>更新方法</h3><p>缓存更新的设计模式有四种：</p><ol><li><p><strong>Cache aside</strong>：</p><ul><li>查询：先查缓存，缓存没有就查数据库，然后加载至缓存内；</li><li>更新：先更新数据库，然后让缓存失效；或者先失效缓存然后更新数据库；</li></ul></li><li><p><strong>Read through</strong>：在查询操作中更新缓存。当缓存失效时，Cache Aside 模式是由调用方负责把数据加载入缓存，而 Read Through 则用<strong>缓存服务自己来加载</strong>；</p></li><li><p><strong>Write through</strong>：在更新数据时发生。当有数据更新的时候，如果没有命中缓存，直接更新数据库，然后返回。如果命中了缓存，则更新缓存，然后由缓存自己更新数据库； </p></li><li><p><strong>Write behind caching</strong>：俗称write back，在更新数据的时候，只更新缓存，不更新数据库，缓存会异步地定时批量更新数据库；</p></li></ol><p>Cache aside：</p><ul><li>为了避免在并发场景下，多个请求同时更新同一个缓存导致脏数据，所以不能直接更新缓存而是令缓存失效。</li><li>先更新数据库后失效缓存：并发场景下，推荐使用<strong>延迟失效（写请求完成后给缓存设置1s过期时间</strong>），在读请求缓存数据时若redis内已有该数据（其他写请求还未结束）则不更新。当redis内没有该数据的时候（其他写请求已令该缓存失效），读请求才会更新redis内的数据。这里的读请求缓存数据可以加上失效时间，以防第二步操作异常导致的不一致情况。</li><li><strong>先失效缓存后更新数据库</strong>：并发场景下，推荐使用延迟失效（写请求开始前给缓存设置1s过期时间），在写请求失效缓存时设置一个1s延迟时间，然后再去更新数据库的数据，此时其他读请求仍然可以读到缓存内的数据，当数据库端更新完成后，缓存内的数据已失效，之后的读请求会将数据库端最新的数据加载至缓存内保证缓存和数据库端数据一致性；在这种方案下，第二步操作异常不会引起数据不一致，例如设置了缓存1s后失效，然后在更新数据库时报错，即使缓存失效，之后的读请求仍然会把更新前的数据重新加载到缓存内。</li></ul><p>推荐使用先失效缓存，后更新数据库，配合延迟失效来更新缓存的模式；</p><h2 id="缓存降级"><a href="#缓存降级" class="headerlink" title="缓存降级"></a>缓存降级</h2><p>限流降级。缓存降级是指当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，即使是有损部分其他服务，仍然需要保证主服务可用。可以将其他次要服务的数据进行缓存降级，从而提升主服务的稳定性。</p><p>如去年双十一的时候淘宝购物车无法修改地址只能使用默认地址，这个服务就是被降级了，这里阿里保证了订单可以正常提交和付款，但修改地址的服务可以在服务器压力降低，并发量相对减少的时候再恢复。</p><p>降级可以根据实时的监控数据进行自动降级也可以配置开关人工降级。是否需要降级，哪些服务需要降级，在什么情况下再降级，取决于对于系统功能的取舍。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记Ⅰ-存储引擎</title>
      <link href="/p/99fbc96.html"/>
      <url>/p/99fbc96.html</url>
      
        <content type="html"><![CDATA[<h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><ul><li><strong>InnoDB</strong>： MySQL 8.0中的默认存储引擎。InnoDB是MySQL的<strong>事务安全</strong>（符合ACID）存储引擎，具有提交、回滚和崩溃恢复功能，以保护用户数据。InnoDB的<strong>行级锁</strong>（没有升级到更粗粒度的锁）和Oracle风格的一致无锁读取增加了多用户并发性和性能。InnoDB在集群索引中存储用户数据，以减少基于主键的普通查询的I&#x2F;O。为了保持数据的完整性，InnoDB也支持<strong>FOREIGN KEY参考完整性约束</strong>。其表有两个文件：.frm、.idb。</li><li><strong>MyISAM</strong>：表的占用空间小。<strong>表级锁</strong>限制了读&#x2F;写工作负载的性能，所以它经常被用于网络和数据仓库配置中的<strong>只读或主要是读</strong>的工作负载。其表有三个文件：.frm、.MYD、.MYI。</li><li><strong>Memory</strong>：将所有数据存储在<strong>RAM中</strong>，以便在需要快速查找非关键数据的环境中快速访问。这个引擎以前被称为HEAP引擎。它的使用情况越来越少；<strong>InnoDB及其缓冲池内存区提供了一种通用和持久的方式，将大部分或所有数据保存在内存中，而NDBCLUSTER为巨大的分布式数据集提供快速的键值查询</strong>。</li><li><strong>csv</strong>：它的表格实际上<strong>是带有逗号分隔值的文本文件</strong>。CSV表让你以CSV格式导入或转储数据，与读写相同格式的脚本和应用程序交换数据。因为CSV表<strong>没有索引，所以你通常在正常操作中把数据保存在InnoDB表中，而只在导入或导出阶段使用CSV表</strong>。</li><li><strong>Archive</strong>：紧凑的、无索引的表，用来存储和检索大量很少参考的历史、归档或安全审计信息。</li><li>Blackhole、NDB、Merge、Federated、Example</li></ul><h2 id="MySQL体系结构总结"><a href="#MySQL体系结构总结" class="headerlink" title="MySQL体系结构总结"></a>MySQL体系结构总结</h2><h3 id="模块详解"><a href="#模块详解" class="headerlink" title="模块详解"></a>模块详解</h3><ul><li><strong>Connector</strong>：用来支持各种语言和SQL的交互，比如Java的JDBC。</li><li><strong>Management Services &amp; Utilities</strong>：系统管理和控制工具，包括备份恢复、MySQL复制，集群等</li><li><strong>Connection Pool</strong>：连接池，管理需要缓冲的资源，包括用户密码权限线程等</li><li><strong>SQL Interface</strong>：用来接收用户的SQL命令，返回用户需要的查询结果</li><li><strong>Parse</strong>：用来解析SQL语句</li><li><strong>Optimizer</strong>：查询优化器</li><li><strong>Cache and Buffer</strong>：查询缓存，除了行记录的缓存之外还有表缓存，key缓存，权限缓存等</li><li><strong>Pluggable Storage Engine</strong>：插件式存储引擎，提供API给服务层使用，跟具体的文件打交道</li></ul><h3 id="架构分层"><a href="#架构分层" class="headerlink" title="架构分层"></a>架构分层</h3><p>执行操作的服务层，和存储管理数据的存储引擎层</p><ul><li>服务层：包括客户端与服务端的链接，查询缓存的判断，对SQL语句进行词法和语法的解析。然后是优化器，MySQL底层根据一定的规则对语句进行优化，最后交给执行器去执行。</li><li>存储引擎：是数据真正存放的地方，再往下就是文件管理系统，内存或者磁盘。</li></ul><h3 id="一条更新语句是如何执行的"><a href="#一条更新语句是如何执行的" class="headerlink" title="一条更新语句是如何执行的"></a>一条更新语句是如何执行的</h3><p>首先需要了解一下数据是如何在MySQL中存在的。</p><ol><li><p><strong>缓冲池 Buffer Pool</strong></p><p>对于InnoDB存储引擎来说，数据都是存储在磁盘上的，要操作数据必须先要将磁盘里的数据加载到内存中才行。这里很像操作系统的内存机制。</p><p>InnoDB设定了一个最小单位，叫做页，默认大小为16KB，他是一个逻辑单位，修改该值的大小必须修改源码重新编译安装。</p><p>InnoDB使用了一种缓冲池的技术，就是把磁盘读的页放到一块内存区域中，下次再次读取该页先判断是否在内存中。这个内存区域就是Buffer Pool。</p><p>修改数据的时候，先修改缓冲池中的页，与磁盘不一致的时候称为<strong>脏页</strong>。InnoDB有一个专门的后台线程将数据写入到磁盘，每隔一段时间就一次性的将多个修改写入磁盘，这个动作称之为<strong>脏刷</strong>。</p></li><li><p><strong>InnoDB的内存结构和磁盘结构</strong></p><p>内存结构里面主要是Buffer Pool、Change Buffer、Log Buffer、AHI</p><ul><li><p><strong>Buffer Pool</strong>：默认大小为128MB</p></li><li><p><strong>（redo） Log Buffer</strong>：由上面脏刷操作可以知道数据刷新不是实时的，若在未刷入时系统发生宕机或者重启，数据就会丢失。故内存的数据必须要有一个持久化的措施。</p><p>于是，InnoDB把所有对页面的修改操作专门写入一个日志文件，先写日志再写磁盘。如果有未同步到磁盘的数据，数据库在启动的时候，会从这个日志文件进行恢复操作（实现crash-safe）。事务中的ACID的D（持久性）就是用它实现的。</p><p>这个日志文件就是<strong>redo log</strong>（重做日志），默认48M（大小固定），2个。<strong>是InnoDB独有的特性</strong>。</p><p>刷盘是随机I&#x2F;O，而记录日志是顺序I&#x2F;O（连续写的），顺序IO的效率更高，因此先把修改写入日志文件，在保证了内存数据的安全性的情况下，可以延迟刷盘时机，进而提升系统吞吐。</p><p>还有一个有关的<strong>undo log</strong>，用于将数据从逻辑上恢复至事务之前的状态，属于逻辑结构的日志。</p></li></ul></li><li><p><strong>后台线程</strong></p><p>主要作用是负责刷新内存池中的数据和修改的数据页刷新到磁盘。分为master thread，IO thread、</p><p>purge thread、page cleaner thread。除了InnoDB架构中的日志文件，MySQL的server层也有一个日志文件，佳作binlog，可以被所有的存储引擎使用。</p></li><li><p><strong>Binlog</strong></p><p>binlog以事件的形式记录了所有的DDL和DML语句，属于逻辑日志。可以用来做主从复制和数据恢复，和redo log不同，它的文件内容是可以追加的，没有固定大小限制。</p><p>在开启binlog的情况下可以将其导出为SQL语句，把所有的操作重放一遍来实现数据的恢复。</p></li><li><p><strong>更新过程</strong></p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090102699.png" alt="image-20230105221615853"></p><p>总结重点：</p><ol><li>先记录到内存（buffer pool），再写日志文件</li><li>记录redo log分为两个阶段：prepare 和 commit</li><li>存储引擎和server分别记录不同的日志</li><li>先记录redo在记录binlog</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记Ⅲ-事务</title>
      <link href="/p/e791ddba.html"/>
      <url>/p/e791ddba.html</url>
      
        <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>wiki：事务是数据库管理系统（DBMS）执行过程中的一个逻辑单位，有一个有限的数据库操作序列构成。InnoDB支持事务。</p><h2 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h2><ol><li><strong>原子性</strong>：Atomicity，不可再分，意味着对数据库的一系列操作要么全部成功要么全部失败，不会出现其他的情况。出错时需要进行回滚，在InnoDB中使用undo log来实现，记录了数据修改之前的值（逻辑日志）。</li><li><strong>一致性</strong>：Consistency，指数据库的完整性约束没有被破坏，事务执行前后都是合法的数据状态。比如主键必须是唯一的，字段长度符合要求。</li><li><strong>隔离性</strong>：Isolation，数据库中会有很多的事务同时去操作同一张表或者同一行数据，必然会出现一些并发或者干扰的操作，对隔离的定义就是说这些事务之间是透明的、相互不干扰的，借此保证数据的一致性。</li><li><strong>持久性</strong>：Durability，对数据库的任何操作，增删改查，只要事务提交成功，那么结果就是永久的，不可能因为系统的宕机或者重启而恢复到之前的状态。持久性通过redo log来实现，在操作数据时，会先写到内存的buffer pool中，同时记录redo log，如果在刷盘之前出现异常，在重启后就可以读取redo log的内容写到磁盘，保证数据的持久性。</li></ol><h2 id="InnoDB三大特性"><a href="#InnoDB三大特性" class="headerlink" title="InnoDB三大特性"></a>InnoDB三大特性</h2><ol><li><p>双写缓冲区（DoubleWrite Buffer）</p><p>是一个存储区，InnoDB将页面写入InnoDB数据文件中的适当位置之前，先从缓冲池中刷新页面。如果在页面写入过程中存在操作系统、存储子系统或意外的misqld进程退出，则InnoDB可以在崩溃期间从doublewrite缓冲区找到页面的良好副本。在系统恢复后，MySQL可以根据redolog来恢复，而MySQL在恢复过程中是检查page的checksum，即page的最后事务号，发生partial page write（页断裂，页断裂是数据库宕机时，数据库页面只有部分写入磁盘，导致页面出现不一致的情况。）问题时，page已损坏，找不到该page中的事务号，就无法恢复。而双写缓冲区，在宏观上与事务的四特性有关，在底层则是为了解决partial page write问题。</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090101440.png" alt="image-20230203225219355"></p><p>InnoDB会在磁盘上划分出连续的两个区的范围，一个区包含64页，一页16k，一个区为1M，因此一个<strong>双写缓冲区</strong>的大小为两个1M，共2M。</p><ul><li><p>我们写数据时，InnoDB会先调用memcopy函数把数据从内存的buffer pool中复制到双写缓冲区中，接着调用fsyc函数将其写入到磁盘的双写缓冲区中（完整页数据），最后再把数据写入到对应的数据页中。</p></li><li><p>如果写页过程出现意外崩溃，InnoDB在稍后的恢复过程中在双写缓冲区中找到完好的page副本用于修复。redolog存储的是修改操作，只能恢复被修改过字段出现的损坏。</p></li><li><p>为什么写数据要提前写个双写缓冲区？</p><p>一页数据是16kb，磁盘写一次是4kb，因此一页数据写磁盘需要写四次。假如在写到8kb时数据库崩了，就会出现partial page write问题。而双写缓冲区作为预分配的磁盘位置，数据库在写磁盘双写缓冲区时是使用的顺序写，因此效率上比直接写数据的随机写快的多，出问题的概率系小。</p></li></ul></li><li><p>AHI 自适应哈希</p><p>InnoDB自行研发的，用于提高MySQL的查询效率。</p><p><strong>InnoDB内部会自己去监控索引表，如果监控到某个索引经常用，那么就认为是热数据，然后内部会自己创建一个hash索引，称之为自适应哈希索引（Adaptive Hash Index，AHI）。</strong></p><p>创建之后，若下次又查询到该索引，则可直接通过hash算法推导出记录地址一次查到数据，比查b+树更有效率。MySQL在哈希索引的设计上还采用了热点分散技术，这样的哈希索引在MySQL上默认是启动8个的，热点数据会分散到不同的哈希索引上，因此热数据访问时，能将请求分散到不同的哈希索引上，提高并发访问的性能。</p></li><li><p>Buffer Pool</p><ul><li><p>什么是Buffer Pool </p><p>InnoDB为了缓存磁盘中的页，在MySQL服务器启动的时候就向操作系统申请了一片连续的内存，叫做Buffer Pool。默认大小只有128M大小，启动服务器时可以通过配置<code>innodb_buffer_pool_size</code>参数的值来指定大小。</p></li><li><p>Buffer Pool内部组成</p><p>bufferpool中默认的缓存页大小和在磁盘上默认的页大小是一样的，都是16KB。InnoDB为每一个其中的缓存页都创建了控制信息，这些控制信息包括该页所属的表空间编号、页号、缓存页在bufferpool中的地址，链表节点信息、一些所信息以及LSN信息等，称之为<strong>控制块</strong>。</p><p>MySQL大部分缓存的数据都在bufferpool中，缓存页就是数据，数据库查询出来的数据都会缓存到缓存页中，便于下次快速查询，控制块保存了缓存页的各种信息地址等，用来查找缓存页。</p></li><li><p>Buffer Pool中的链表结构</p><ul><li><p>Free 链：是将所有空闲的缓存页串起来，也就是将空闲的缓存页对应的控制块地址用一个链表来维护，在新数据到来时，可以直接在Free链上找到空闲缓存页。</p></li><li><p>Flush链：结构与Free链一样，MySQL把缓冲区上面这种被<strong>修改过</strong>的数据的控制块也用一个链表来进行维护，以此来快速定位被修改过的数据，也被称之为脏数据（未落盘的数据），因此Flush链也被称为<strong>脏链</strong>。</p><p>MySQL数据提交之后并不是立刻落盘的，而是依然在缓冲区里，最后会统一落盘，数据提交后会有redo日志，即使没有落盘，在数据库挂掉的时候也依然可以恢复数据，读取的时候也可以正常读取。</p></li><li><p>LRU链表：是一种最近最少使用淘汰链表，使用过的数据会被维护到这个链表上，新用提到表头，当链表满的时候就从链表尾开始淘汰不常使用的数据。</p><p>MySQL对LRU的改进措施：</p><ol><li><p>将LRU链表分为两部分，前面为热数据区（Young区），后面为冷数据区（Old区，占37%）。排除了全表扫描等类似的大数据量查询直接把热门数据淘汰出缓冲区的情况。</p></li><li><p>对冷链数据移动到热链上做了时间限定。限定时间内对冷链上数据的访问不会移动到热数据区，只有超过这个时间，再次访问冷链上的数据才会被移动到热数据区。避免了短时间内全表扫描等大数据量频繁刷新导致热数据被移出热链的情况。</p></li><li><p>热链部分并非每次访问都会向前移动，只有在热点的后四分之一内的数据才会在访问时移动到热链头部，减少移动带来的资源消耗，提升性能。</p></li><li><p>参数：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">innodb_old_blocks_pct:</span> <span class="string">调整冷热数据区域占比，默认37%</span></span><br><span class="line"><span class="attr">innodb_old_blocks_time:</span> <span class="string">调整限定间隔时间，默认1秒</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>MySQL刷新数据落盘的途径</p><p>MySQL后台会有一个定时器，定时将数据进行统一落盘，以不影响用户线程处理正常的请求。</p><ul><li><strong>BUF_FLUSH_LIST</strong>：从flush链表中刷新一部分页面到磁盘，刷新速率取决于当时系统是不是很繁忙。</li><li><strong>BUF_FLUSH_LRU</strong>：从LRU链表的冷数据中刷新一部分页面到磁盘。后台线程会定时从LRU链表尾部开始扫描一些页面，扫描的页面数量可以通过系统变量<code>innodb_lru_scan_depth</code>来指定，如果从里面发现脏页，会将其刷新到磁盘。</li><li><strong>BUF_FLUSH_SINGLE_PAGE</strong>：有时候后台线程刷新脏页的进度比较慢，导致用户线程在准备加载一个磁盘页到BufferPool时没有可用的缓存页，这时就会尝试看LRU链表尾部有没有可以直接释放掉的未修改页面，如果没有的话，会不得不将LRU链表尾部的一个脏页同步刷新到磁盘（会降低处理用户请求的速度）。</li></ul></li></ul></li></ul></li></ol><h2 id="事务并发带来的问题"><a href="#事务并发带来的问题" class="headerlink" title="事务并发带来的问题"></a>事务并发带来的问题</h2><ol><li><p><strong>脏读</strong>：事务中，修改了数据但<strong>没提交</strong>，从而导致前后两次读取数据不一致的情况。由未提交修改而产生的不一致结果称之为脏读。</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090101441.png" alt="image-20230204151657235"></p></li><li><p><strong>不可重复读</strong>：发生在update和delete情形中。第一个事务查询到了一个数据，然后第二个事务进行了一个update操作，并通过commit<strong>提交了</strong>修改，之后第一个事务又进行了一次查询，出现了前后两次读取数据不一致的情况。由提交修改造成的不一致称为不可重复读。</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090101442.png" alt="image-20230204152033817"></p></li><li><p><strong>幻读</strong>：发生在INSERT情形。第一个事务执行了一个范围查询，然后第二个事务执行了一个插入操作并提交修改。第一个事务再去执行查询时，结果不一致。由插入数据造成的称为幻读。</p></li></ol><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><h3 id="SQL92标准"><a href="#SQL92标准" class="headerlink" title="SQL92标准"></a>SQL92标准</h3><ol><li><p><strong>Read Uncommitted，未提交读</strong></p><p>一个事务可以读取到其他事务未提交的数据，出现脏读。没有解决任何问题。</p></li><li><p><strong>Read Committed，已提交读</strong></p><p>一个事务只能读取到其他事务已提交的数据，不能读取到未提交的数据，解决了脏读的问题，但会出现不可重复读的问题。</p></li><li><p><strong>Repeatable Read，可重复读</strong></p><p>解决了不可重复读问题，即在同一个事务里面多次读取同样的数据结果是一样的，但在这个级别下没有解决幻读的问题。</p></li><li><p><strong>Serializable，串行化</strong></p><p>所有事务都是串行执行的，也就是对数据的操作需要排队，已经不存在事务的并发操作了，所以解决了所有的问题。</p></li></ol><h3 id="MySQL-InnoDB对隔离级别的支持"><a href="#MySQL-InnoDB对隔离级别的支持" class="headerlink" title="MySQL InnoDB对隔离级别的支持"></a>MySQL InnoDB对隔离级别的支持</h3><table><thead><tr><th align="center">事务隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">未提交读</td><td align="center">可能</td><td align="center">可能</td><td align="center">可能</td></tr><tr><td align="center">已提交读</td><td align="center">不可能</td><td align="center">可能</td><td align="center">可能</td></tr><tr><td align="center">可重复读</td><td align="center">不可能</td><td align="center">不可能</td><td align="center">对InnoDB不可能</td></tr><tr><td align="center">串行化</td><td align="center">不可能</td><td align="center">不可能</td><td align="center">不可能</td></tr></tbody></table><h3 id="两大实现方案"><a href="#两大实现方案" class="headerlink" title="两大实现方案"></a>两大实现方案</h3><ol><li><p><strong>LBCC</strong></p><p>读取数据的时候，锁定要操作的数据，不允许其他事务修改。这种方案称之为<strong>基于锁的并发控制（Lock Based Concurrency Control，LBCC）</strong>。</p></li><li><p><strong>MVCC</strong></p><p>在修改数据的时候给他建立一个备份或者快照，后面再来读取这个快照就行了，这种方案称为<strong>多版本的并发控制（Multi Version Concurrency Control，MVCC）</strong>。其核心思想为：我可以查到我这个事务开始之前已经存在的已提交的数据，即使它在后面被修改或者删除了，在我这个事务之后新增的数据我是查不到的。</p><p>InnoDB为每行记录都实现了两个隐藏字段，还要加上一个ROWID：</p><ul><li><p><strong>DB_TRX_ID</strong>：6字节，插入或更新行的最后一个事务的事务ID，事务编号是自动递增的。我们将其理解为<strong>创建版本号</strong>，在数据新增或者修改为新数据的时候，记录当前事务ID，即创建版本号被修改为当前事务ID。</p></li><li><p><strong>DB_ROLL_PTR</strong>：7字节，回滚指针。将其理解为<strong>删除版本号</strong>，数据被删除或记录为旧数据时，记录当前事务ID，即删除版本号被修改为当前事务ID。</p></li><li><p>将这两个事务ID理解为版本号。后面事务的创建版本号比当前事务ID大的修改无法被当前事务查询出，但是删除版本号大于当前ID的事务的修改操作会被查出来。查询操作的事务可被执行多次，且事务创建版本号不变。</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记Ⅱ-索引</title>
      <link href="/p/7e988c00.html"/>
      <url>/p/7e988c00.html</url>
      
        <content type="html"><![CDATA[<h2 id="索引是什么"><a href="#索引是什么" class="headerlink" title="索引是什么"></a>索引是什么</h2><h3 id="索引图解"><a href="#索引图解" class="headerlink" title="索引图解"></a>索引图解</h3><p>​数据库索引，是数据库管理系统（DBMS）中的一个排序的数据结构，以协助快速查询、更新数据库表中数据。</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090101333.png" alt="image-20230106112752440"></p><p>​数据是以文件的形式存放在磁盘上面的，每一行数据都有它的磁盘地址。而索引就是存放这些地址的数据结构。</p><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><ul><li>Normal：非唯一索引，是最普通的索引，没有任何限制</li><li>Unique：唯一索引要求键值不能重复。主键索引是一种特殊的唯一索引，它要求键值不能为空。主键索引使用primary key创建。</li><li>Fulltext：全文索引。针对比较大的数据，几KB大小的数据情况，如果要解决like查询效率低的问题，可以创建全文索引。只有文本类型的字段才能创建全文索引，比如char、varchar、text。</li><li>MyISAM和InnoDB都支持全文索引。</li></ul><h2 id="索引存储模型推演"><a href="#索引存储模型推演" class="headerlink" title="索引存储模型推演"></a>索引存储模型推演</h2><ul><li><p><strong>二叉查找树（BST，Binary Search Tree）</strong>：左小右大。当插入的数据刚好是有序的时候，就会变成链表，斜树。不够平衡。</p></li><li><p><strong>平衡二叉树（AVL Tree）</strong>：左右子树的深度差不超过1。需要通过左旋右旋，RL，LR进行调整确保平衡。每个节点都必须包含索引字段键值、数据磁盘地址（一行）、左右子树的引用。一个树的节点就是16K的大小，但实际使用不需要这么多，所以访问一个树节点进行一次IO的时候就浪费了大量的空间。</p></li><li><p><strong>多路平衡查找树（B Tree）</strong>：分裂合并。节点关键字大于等于1，每个节点的分叉数永远比关键字树多1。每个节点的存储内容和AVL Tree差不多。节点的分裂和合并，其实就是InnoDB页（page）的分裂和合并。</p></li><li><p><strong>B+树</strong>：</p><p>特点：</p><ol><li><p>它的关键字的数量和路数是相等的。</p></li><li><p>B+Tree的根节点和枝节点中都不会存储数据，只有叶子结点才存储数据。找到关键字并不会返回，而是将继续到叶子结点。</p></li><li><p>B+树的每个叶子结点增加了一个指向相邻节点的指针，它的最后一个数据会指向下一个叶子节点的第一个数据，形成一个有序的链表结构。</p></li></ol><p>优势：</p><ol><li>是B树的变种，B树能解决的它都能解决。（每个节点存储更多的关键字，路数更多）</li><li>扫库、扫表的能力更强（对表进行全表扫描，只需要遍历叶子结点就可以了，不需要遍历整棵树）</li><li>B+树对磁盘读写能力相对于B树来说更强（根节点和枝节点不保存数据区，所以一个节点可以保存更多的关键字，一次磁盘加载的关键字更多）</li><li>排序能力更强（叶子节点上有下一数据区的指针，数据形成了链表）</li><li>效率更稳定（B+树永远是在叶子结点上拿到数据，所以IO次数是稳定的）</li></ol></li><li><p>索引的实现方法：</p><ul><li>B&#x2F;B+树：适合用来查找某一范围内的数据，支持数据排序。MyISAM表数据文件和索引文件是分离的，索引文件仅保存数据记录的磁盘地址；InnoDB表数据文件本身就是主索引，叶节点data域保存了完整的数据记录。</li><li>Hash：仅支持”&#x3D;”,”IN”和”&lt;&#x3D;&gt;”精确查询，不范围查询，不支持排序，不支持排序，只有Memory引擎支持显式的Hash索引，但是它的Hash是nonunique的，冲突太多时也会影响查找性能。</li><li>R-Tree：仅支持geometry数据类型。</li></ul></li><li><p>MyISAM</p><p>MyISAM有两个文件：</p><ul><li><p>.MYD：D代表Data，是数据文件，存放数据记录，所有表数据。</p></li><li><p>.MYI：I表示Index，是索引文件，存放索引。</p></li></ul><p>在MyISAM中数据和索引是两个独立的文件。MyISAM的B+树中叶子结点存储的是数据文件对应的磁盘地址。所以从.MYI中找到键值之后，会到数据文件.MYD中获取相应的数据记录。</p></li><li><p>InnoDB</p><p>在InnoDB中，是以主键为索引来组织数据的存储的，所以索引文件和数据文件是同一个文件，都在.ibd文件里面。在InnoDB的主键索引的叶子节点上，直接存储了数据。</p></li><li><p>聚集索引（聚簇索引）</p><p>索引键值的逻辑顺序和表数据行的物理存储顺序是一致的。在InnoDB中，它组织数据的方式叫做（聚集）索引组织表(clustered index organize table)，所以主键索引是聚集索引，非主键索引都是非聚集索引。</p></li><li><p>辅助索引</p><p>非主键索引，非聚集索引。辅助索引存储的是辅助索引和主键值，如果使用辅助索引查询，会根据主键值在主键索引中查询，最终取得数据。</p></li><li><p>无主键情形</p><p>未指定主键时，InnoDB会选择第一个不包含有NULL值的唯一索引作为主键索引，如果没有这样的唯一索引，啧InnoDB会选择内置6字节长的ROWID作为隐藏的聚集索引，会随着行记录的写入而逐渐递增。</p></li></ul><h2 id="索引使用原则"><a href="#索引使用原则" class="headerlink" title="索引使用原则"></a>索引使用原则</h2><h3 id="列的离散度"><a href="#列的离散度" class="headerlink" title="列的离散度"></a>列的离散度</h3><p>​<code>count(distinct(column_name)):count(*)</code>，列的全部不同值和所有数据行的比例。数据行数相同的情况下，分子越大列的离散度就越高。<strong>如果列的重复值越多，离散度就越低。离散度越高需要扫描的行数就越少，查询速度就越快。</strong></p><h3 id="联合索引最左匹配"><a href="#联合索引最左匹配" class="headerlink" title="联合索引最左匹配"></a>联合索引最左匹配</h3><ul><li><p>多条件查询时会建立联合索引，单列索引可看做是特殊的联合索引。</p></li><li><p><code>alter table user_innodb add index comidx_name_phone(name,phone)</code>,这就是给user表建立了一个name和phone的联合索引。<strong>联合索引在B+Tree中是复合的数据结构，它是按照从左到右的顺序来建立搜索树的(name在左边，phone在右边)<strong>。name是有序的，phone是无序的。当name相等的时候phone才是有序的。在使用<code>wher name=&#39;name&#39; and phone=&#39;131***&#39;</code>去查询数据的时候，会优先比较name来确定下一步应该搜索的方向，在name相同的时候再比较phone。</strong>但是如果查询条件中没有name，就不知道第一步应查询哪个节点，因为建立搜索树的时候name是第一个比较因子，所以用不到索引。</strong></p></li><li><p>对于联合索引（a,b）只有在使用右边的b字段时，无法使用索引，会全表扫描，其他情况都会使用联合索引。</p></li><li><p>创建联合索引：</p><p><code>create index idx_name_phone on user_innodb(name,phone)</code></p><p><code>create index idx_a_b_c on user_innodb(a,b,c)</code>，想当于创建三个索引：<code>index(a),index(a,b),index(a,b,c)</code>即最左边的是必要条件。</p></li></ul><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>​回表：非主键索引，先通过索引找到主键索引的键值，再通过主键值查出索引里面没有的数据，它比基于主键索引的查询多扫描了一棵索引树，这个过程就叫做回表。</p><p>​例如：<code>select * from user_innodb where name=&#39;qqs&#39;</code></p><p>​在辅助索引里面，不管是单列索引还是联合索引，如果select的数据列只用从索引中就能取得，不必从数据区中读取，这时候使用的索引就叫做覆盖索引，这样就避免了回表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建联合索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> user_innodb <span class="keyword">drop</span> index comixd_name_phone;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> user_innodb <span class="keyword">add</span> index <span class="string">&#x27;comixd_name_phone&#x27;</span> (<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;phone&#x27;</span>);</span><br><span class="line"><span class="comment">-- 下面三个查询语句都用到了覆盖索引</span></span><br><span class="line">explain <span class="keyword">select</span> name,phone <span class="keyword">from</span> user_innodb <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;qq2&#x27;</span> <span class="keyword">and</span> phone<span class="operator">=</span><span class="string">&#x27;1232321&#x27;</span>;</span><br><span class="line">explain <span class="keyword">select</span> name <span class="keyword">from</span> user_innodb <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;qq2&#x27;</span> <span class="keyword">and</span> phone<span class="operator">=</span><span class="string">&#x27;12313123&#x27;</span>;</span><br><span class="line">explain <span class="keyword">select</span> phone <span class="keyword">from</span> user_innodb <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;qq2&#x27;</span> <span class="keyword">and</span> phone<span class="operator">=</span><span class="string">&#x27;12313123&#x27;</span>;</span><br><span class="line"><span class="comment">-- 下条查询语句用不到覆盖索引</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br></pre></td></tr></table></figure><p>​假若一个主键索引，其他3个字段建立辅助索引，select *也属于覆盖索引。</p><h3 id="索引的创建与使用"><a href="#索引的创建与使用" class="headerlink" title="索引的创建与使用"></a>索引的创建与使用</h3><ul><li><p>索引的创建</p><ol><li>在用于where判断order排序和join的（on）字段上创建索引。</li><li>索引的个数不要过多–浪费空间，更新变慢。</li><li>过长的字段，建立前缀索引。</li><li>区分度低的字段，例如性别，不要建索引。离散度太低，导致扫描行数太多。</li><li>频繁更新的值，不要作为主键或者索引。   页分裂。</li><li>随机无序的值，不建议作为主键索引，例如身份证，UUID。无序，分裂。</li><li>组合索引把散列性高（区分度高）的值放在前面。</li><li>创建复合索引，而不是修改单列索引。</li></ol></li><li><p>什么时候用不到索引</p><ol><li><p>索引列上使用函数（replace\substr\concat\sum count avg）、表达式（+-*&#x2F;）。</p></li><li><p>字符串不加引号，出现隐式转换。</p></li><li><p>like条件中前面带%，where条件中like abc%，like %23432%，like %777都用不到索引，因为过滤的开销太大，这时候可以用全文索引。</p></li><li><p>负向查询 not like 不能；!&#x3D;, &lt;&gt;,not in在某些情况下可以：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees <span class="keyword">where</span> emp_no <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">1</span>);</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees <span class="keyword">where</span> emp_no <span class="operator">&lt;&gt;</span> <span class="number">1</span></span><br><span class="line"><span class="comment">-- 跟数据库版本、数据量、数据选择度都有关系</span></span><br></pre></td></tr></table></figure></li><li><p>其实，用不用索引，最终都是<strong>优化器</strong>说了算。</p><p>Optimizer，是基于cost开销（cost base optimizer），不是基于规则（rule-based optimizer），也不是基于语义。怎么开销小就怎么来。</p></li></ol></li><li><p>使用索引有基本原则，但没有具体规则</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记Ⅴ-优化</title>
      <link href="/p/ef2788f.html"/>
      <url>/p/ef2788f.html</url>
      
        <content type="html"><![CDATA[<h2 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h2><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090059937.png" alt="image-20230208135856698"></p><h2 id="连接–配置优化"><a href="#连接–配置优化" class="headerlink" title="连接–配置优化"></a>连接–配置优化</h2><p>第一个环节就是客户端到服务端的连接，可能会出现服务端的连接数不够造成的性能问题。有两个解决办法：一是增加服务端的可用连接数，通过修改配置参数增加可用连接数，修改<code>max_connections</code>的大小<code>show variables like &#39;max_connections&#39;;--修改最大连接数</code>，或者及时释放不活动的连接。交互式和非交互式的客户端的默认超时时间都是28800秒，8小时，我们可以把这个值调小。二是，从客户端来说，可以减少从服务端获取的连接数，如果不想要每一次执行SQL都创建一个新的连接，可以引入连接池，实现连接的重用。有点像（ThreadLocal）。</p><h2 id="缓存–架构优化"><a href="#缓存–架构优化" class="headerlink" title="缓存–架构优化"></a>缓存–架构优化</h2><ol><li><p><strong>缓存</strong></p><p>在应用系统的并发数非常大的情况下，如果没有缓存，会造成两个问题：一方面是会给数据库带来很大的压力，另一方面，从应用的层面来说，操作数据的速度也会收到影响。可以使用第三方的缓存服务来解决这个问题，如Redis。</p></li><li><p><strong>集群、主从复制</strong></p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090059809.png" alt="image-20230208153806906"></p><p>单台数据库服务满足不了访问需求，可以做数据库的集群方案。做了主从复制之后，只把数据写入master节点，而读的请求可以分担到slave节点。这种方案叫做读写分离。</p><p>读写分离可以一定程度减轻数据库服务器的访问压力，但是需要特别注意主从数据一致性的问题。</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090059323.png" alt="image-20230208153821704"></p></li><li><p><strong>分库分表</strong></p><p><strong>垂直分库，减少并发压力。水平分表，解决存储瓶颈。</strong></p><p>垂直分库的做法，是把一个数据库按照业务拆分成不同的数据库：</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090059259.png" alt="image-20230208154603011"></p><p>水平分表的做法，是把单张表的数据按照一定的规则分布到多个数据库。</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090059953.png" alt="image-20230208155232639"></p></li></ol><h2 id="优化器–SQL语句分析与优化"><a href="#优化器–SQL语句分析与优化" class="headerlink" title="优化器–SQL语句分析与优化"></a>优化器–SQL语句分析与优化</h2><ol><li><p>慢查询日志 slow query log</p><ul><li><p>打开慢日志开关：打开是有代价的，所以默认关闭。<code>show variables like &#39;slow_query%&#39;</code>。除了这个开关还有一个参数，控制执行超过多长时间的SQL才记录到慢日志，默认是十秒，改成0秒的话就是记录所有的SQL。<code>show variables like &#39;%long_query%&#39;;</code>。可以直接动态修改参数（重启后失效）：、</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%long_query%&#x27;</span>;<span class="keyword">set</span> @<span class="variable">@global</span>.slow_query_log<span class="operator">=</span><span class="number">1</span>; <span class="comment">-- 1开启 0关闭 重启后失效</span></span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@global</span>.long_query_time<span class="operator">=</span><span class="number">3</span>; <span class="comment">-- msyql默认的慢查询时间是10秒，另开一个窗口后才会查到最新值</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;slow_query%&#x27;</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%long_query%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>或者修改配置文件my.cnf:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">slow_query_log=ON</span><br><span class="line">long_query_time=2</span><br><span class="line">slow_query_log_file=/var/lib/mysql/localhost-slow.log</span><br></pre></td></tr></table></figure></li><li><p>慢日志分析</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> status <span class="keyword">like</span> <span class="string">&#x27;slow_queries&#x27;</span>; <span class="comment">-- 查看有多少，慢查询</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%slow_query%&#x27;</span>; <span class="comment">-- 获取慢日志目录</span></span><br></pre></td></tr></table></figure><p><strong>mysqldumpslow</strong>：是MySQL提供的一个慢日志分析工具，在MySQL的bin目录下</p><p><code>mysqldumpslow --help</code></p><p>例如：查询用时最多的10条慢SQL：</p><p><code>mysqldumpslow -s -t 10 -g &#39;select&#39; /var/lib/mysql/localhost-slow.log</code></p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090100289.png" alt="image-20230208204632713"></p><p>Count：表示这个SQL执行了多少次</p><p>Time：代表执行的时间，括号里面是累计时间</p><p>Lock：表示锁定的时间，括号是累计</p><p>Rows：表示返回的记录数，括号是累计</p></li></ul></li><li><p>SHOW PROFILE</p><p>可以查看SQL语句执行的时候使用的资源，比如CPU、IO的消耗情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@profiling</span>; <span class="comment">-- 查看是否开启</span></span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@profiling</span><span class="operator">=</span><span class="number">1</span>； <span class="comment">-- 开启</span></span><br><span class="line"><span class="comment">-- 查看profile统计</span></span><br><span class="line"><span class="keyword">show</span> profiles;</span><br><span class="line"><span class="comment">-- 查看最后一个SQL的执行详细信息,从中找出耗时较多的环节</span></span><br><span class="line"><span class="keyword">show</span> profile;</span><br><span class="line"><span class="comment">-- 也可以根据ID查看执行详细信息，在后面带上 for query +ID</span></span><br><span class="line"><span class="keyword">show</span> profile <span class="keyword">for</span> query <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 其他系统命令</span></span><br><span class="line"><span class="comment">-- 分析server层的运行信息，可以用show status</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> status; <span class="comment">-- 用于查看MySQL服务器运行状态（重启后会清空）</span></span><br><span class="line"><span class="comment">-- 可以用like通配符过滤，例如查看select语句的执行次数</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> status <span class="keyword">like</span> <span class="string">&#x27;com_select&#x27;</span>; <span class="comment">-- 查看select次数</span></span><br><span class="line"><span class="comment">-- 如果要分析服务层的连接信息，可以用：</span></span><br><span class="line"><span class="keyword">show</span> processlist; <span class="comment">-- 用于显示用户运行线程 可以用kill id 杀掉指定线程</span></span><br><span class="line"><span class="comment">-- 也可以查表，效果一样</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema processlist;</span><br><span class="line"><span class="comment">-- 显示存储引擎的当前运行信息，包括事务持有的表锁、行锁信息；事务的锁等待况；线程信号量；文件IO请求；buffer pool统计信息</span></span><br><span class="line"><span class="keyword">show</span> engine；</span><br><span class="line"><span class="keyword">show</span> engine innodb status;</span><br></pre></td></tr></table></figure><p>通过上述的种种操作，我们可以知道哪些SQL慢，且慢在哪。MySQL又提供了一个执行计划的工具，通过EXPLAIN可以模拟优化器执行SQL查询语句的过程，来知道MySQL是怎么处理一条SQL语句的。通过这种方式我们可以分析语句或者表的性能瓶颈。</p></li><li><p>EXPLAIN执行计划</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090100887.png" alt="image-20230208230026498"></p><p><strong>select_type查询类型</strong>，还有其他：DEPENDENT UNION、DEPENDENT SUBQUERY、MATERIALIZED、UNCACHEABLE SUBQUERY、UNCACHEABLE UNION。</p><p>常见的查询类型：</p><ul><li><p>SIMPLE：简单查询，不包含子查询和关联查询union。</p></li><li><p>PRIMARY：子查询SQL语句中的主查询，也就是最外面的那层查询。</p></li><li><p>SUBQUERY：子查询中所有的内层查询都是SUBQUERY类型的。</p></li><li><p>DERIVED：派生查询，表示在得到最终查询结果之前会用到临时表。</p></li><li><p>UNION：用到了UNION查询（UNION会用到内部的临时表）。UNION ALL不需要去重，因此不用临时表。</p></li><li><p>UNION RESULT：主要是显示哪些表之间存在UNION查询。</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询ID为1或2的老师教授的课程</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> cr.name</span><br><span class="line"><span class="keyword">FROM</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> tid<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> tid<span class="operator">=</span><span class="number">2</span>)cr;</span><br></pre></td></tr></table></figure><p><strong>对于关联查询，先执行右边的table（UNION），在执行左边的table</strong>，类型是DERIVED。</p></li></ul><p><strong>type</strong>，在常用的连接类型中：system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;all，其他还有fulltext、ref_or_null、index_merger、unique_subquery、index_subquery。以上除了all，都能用到索引。</p><ul><li><p>const：主键索引或者唯一索引与常数进行等值匹配，只能查到一条数据的SQL。</p></li><li><p>system：是const的一种特例，只有一行满足条件，对于MyISAM、Memory的表，只查询到一条记录，也是system。</p></li><li><p>eq_ref：通常出现在多表的join查询，<strong>被驱动表通过唯一性索引</strong>（UNIQUE或PRIMARY KEY）进行访问，此时被驱动表的访问方式就是eq_ref。eq_ref是除const之外最好的访问形式。</p></li><li><p>以上三个访问方式都是可遇不可求的，基本上很难优化的这个状态。</p></li><li><p>ref：<strong>查询用到了非唯一索引</strong></p></li><li><p>range：对索引进行范围扫描。不走索引一定是全表扫描（ALL），IN查询也是range（字段有主键索引）</p></li><li><p>index：Full Index Scan，查询全部索引中的数据（比不走索引快）</p><p><code>EXPLAIN SELECT tid FROM teacher;</code></p></li><li><p>ALL：FULL Table Scan，如果没有索引，type就是ALL。代表全表扫描。</p></li><li><p>一般来说，需要保证查询至少打到range级别，最好能达到ref。ALL（全表扫描）和index（查询全部索引）都是需要优化的。</p></li></ul><p><strong>possible_key、key</strong>：可能用到的索引和实际用到的索引。如果是NULL就代表没有用到的索引。possible_key可以有一个或者多个，比如查询多个字段都有索引，或者一个字段同时有单列索引和联合索引。能用到的索引并不是越多越好。可能用到索引不代表一定用到索引。如果通过分析发现没有用到索引，就要检查SQL或者创建索引。</p><p><strong>key_len</strong>：所以的长度（使用的字节数）。跟索引字段的类型、长度有关。表上有联合索引：KEY `comidx_name_phone`(`name`,`phone`)：<code>explain select * from user_innodb where name=&#39;XXX&#39;</code>这里索引只用到了name字段，utf8mb4编码1字符4字节。所以是255*4&#x3D;1020.使用变长字段varchar需要额外增加2字节，允许NULL需要额外增加1字节。一共是1023&#x3D;key_len。</p><p><strong>rows</strong>：MySQL认为扫描多少行（数据或索引）才能返回请求的数据，是一个预估值，一般来说行数越少越好。</p><p><strong>filtered</strong>：表示存储引擎返回的数据在server层过滤后，剩下多少满足查询的记录数量的比例，是一个百分比。如果比例很低，说明存储引擎层返回的的数据需要经过大量的过滤，这个是会消耗性能的。</p><p><strong>ref</strong>：使用哪个列或者常数和索引一起从表中筛选数据，可以参考一下。（？？？）</p><p><strong>extra</strong>：执行额外计划给出的额外的信息说明。</p><p>如果需要具体的cost信息，可以用 EXPLAIN FORMAT&#x3D;JSON，可以开启optimizer trace获得更详细的信息。</p></li></ol><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><ol><li><p>存储引擎的选择</p><p>为不同的业务表选择不同的存储引擎，例如：查询插入操作多的业务表，用MyISAM。临时数据用Memory。常规的并发大更新多的表用innodb。</p></li><li><p>字段定义</p><p>原则：使用可以正确存储数据的最小数据类型。为每一列选择合适的字段类型。</p><ol><li>整数类型：tinyint、smallint、mediumint、int、integer、bigint、bit，enum</li><li>字符类型：变长varchar更节省空间，但要多一个字节来记录长度。固定长度用char。</li><li>不要使用外键、触发器、视图：降低了可读性。影响数据库性能，应该把计算的事情交给程序，数据库专心做存储；数据完整性应该在程序中检查。</li><li>大文件存储：不要在数据库存储图片或者大文件。NAS，数据库只需要存储URI。</li><li>表拆分或者字段冗余：把不常用的字段拆分出去，避免列数过大和数据量过大、</li></ol></li></ol><h2 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h2><ol><li>除了对SQL与索引、表定义、架构、存储引擎、配置优化外，业务层面的优化也不能忽视。比如限流、引入MQ削峰等</li><li>SQL推荐：<ul><li>使用小表驱动大表</li><li>用join来代替子查询</li><li>not exist转换为left join IS NULL</li><li>or 改为 union</li><li>使用UNION ALL代替UNION，如果结果集允许重复的话</li><li>大偏移的limit，先过滤再排序。</li></ul></li><li>表结构（冗余、拆分、not null等）、架构优化</li><li>业务层优化，必须条件是否必要</li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记Ⅳ-锁</title>
      <link href="/p/9096ed2c.html"/>
      <url>/p/9096ed2c.html</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL-InnoDB锁的基本类型"><a href="#MySQL-InnoDB锁的基本类型" class="headerlink" title="MySQL InnoDB锁的基本类型"></a>MySQL InnoDB锁的基本类型</h2><h3 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h3><p>Shared Locks（共享锁），在获取了一行数据的读锁以后，可以用来读取数据，所以它也叫做读锁。用<code>select ...... lock in share mode;</code>的方式手动加上一把锁。使用begin开启事务，而不关闭事务，这样做是用来测试，因为<strong>提交事务</strong>或<strong>回滚事务</strong>就会释放锁。</p><p>共享锁的行不可以被修改；共享锁的行可以不加任何锁读取；共享锁的行可以加读锁读取。</p><h3 id="排他锁"><a href="#排他锁" class="headerlink" title="排他锁"></a>排他锁</h3><p>Exclusive Locks（排他锁），他是用来操作数据的，所以又叫做写锁。只要一个事务获取了一行数据的排它锁，其他的事务就不能再获取这一行数据的共享锁和排它锁。释放锁的方式和共享锁一样。手工加锁，用<code>FOR UPDATE</code>给一行数据加上一个排它锁，这个在代码或者操作数据的工具里都比较常用。</p><p>增删改，都会默认加上一个排他锁。select语句默认不会加任何锁类型，如果加排它锁可以使用<code>select ... for update</code>。加过排他锁的数据行在其他事务中是不能修改数据也不能通过for update和lock in share mode锁的方式查询数据。但可以直接通过<code>select ...  from ...</code>查询数据，因为普通查询没有任何锁机制。</p><p>排他锁的行不可以再加排他锁；排他锁的行可以不加读锁；1+2&#x3D;排他锁的行不可以再加任何锁；排他锁的行可以普通读取。</p><p>不用锁的查询可以读取加锁（共享锁、排他锁）的同一行数据</p><h3 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h3><p>在我们给一行数据加上共享&#x2F;排他锁之前，数据库会自动在这张表上加一个意向共享&#x2F;排他锁。</p><p>反过来说，如果一张表上至少有一个意向共享&#x2F;排他锁，说明有其他事务给其中的某些数据行加上了共享&#x2F;排他锁。</p><h3 id="行锁的原理"><a href="#行锁的原理" class="headerlink" title="行锁的原理"></a>行锁的原理</h3><p>InnoDB的行锁，就是通过锁住索引记录来实现的（？）索引为什么可以被锁住？从<code>information_schema.innodb_locks</code>可以看到锁住的是索引。那么：</p><ul><li><p>为什么表里面没有索引的时候，锁住一行数据会导致锁表？or如果锁住的是索引，一张表没有索引怎么办？</p><p>那么一张表有没有可能没有索引？【不会的】</p><ol><li>如果我们定义了主键那么InnoDB会选择主键作为聚集索引</li><li>如果没有显式定义主键，则InnoDB会选择第一个不包含NULL值的唯一索引作为主键索引。 </li><li>如果也没有这样的唯一索引，则InnoDB会选择内置<strong>6字节</strong>长的ROWID作为隐藏的聚集索引，它会随着行记录的写入而主键递增。</li></ol></li><li><p>为什么通过唯一索引给数据行加锁，主键索引也会被锁住？</p><p>在InnoDB里面，当我们使用辅助索引的时候，辅助索引的叶子结点存储的是二级索引和主键的值，比如name&#x3D;4，存储的是name的索引和主键id的值4.</p><p>而主键索引里面除了索引之外，还存储了完整的数据。所以我们通过辅助索引锁定一行数据的时候，它跟我们检索数据的步骤是一样的，会通过主键值找到主键索引，然后也锁定。</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090101844.png" alt="image-20230207231939646"></p></li></ul><h3 id="锁的算法"><a href="#锁的算法" class="headerlink" title="锁的算法"></a>锁的算法</h3><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090101726.png" alt="image-20230207232129301"></p><p>间隙（Gap）连同它左边的记录（Record）被称之为临键的区间。他是一个左开右闭的区间。</p><h4 id="记录锁"><a href="#记录锁" class="headerlink" title="记录锁"></a>记录锁</h4><p>当对于唯一性的索引（包括唯一索引和主键索引）使用等值查询，精准匹配到一条记录的时候，使用的就是<strong>记录锁</strong>。比如<code>where id = 1/4/7/10</code></p><h4 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h4><p>当我们查询的记录不存在时，没有命中任何一个record，无论使用等值查询还是范围查询，使用的都是<strong>间隙锁</strong>。比如<code>where id&gt;4 and id&lt;7， where id = 6</code></p><p>间隙锁主要是阻塞插入insert。相同的间隙锁之间不冲突。</p><p>Gap Lock只在RR（可重复读）中存在，如果要关闭间隙锁，就是把事务隔离级别设置成RC（已提交读），并且把<code>innodb_locks_unsafe_for_binlog设置成ON</code>。这种情况下除了外键约束和唯一性检查会加间隙锁，其他情况都不会用间隙锁。</p><h4 id="临键锁"><a href="#临键锁" class="headerlink" title="临键锁"></a>临键锁</h4><p>当使用了范围查询，不仅命中Record记录，而且包含了gap间隙，在这种情况下使用的就是临键锁，他是MySQL里面默认的行锁算法，相当于记录锁加上间隙锁。临键锁，锁住最后一个key的下一个左开右闭的区间。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java邮件发送</title>
      <link href="/p/99746608.html"/>
      <url>/p/99746608.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ol><li><p>传输协议</p><ul><li>SMTP协议（Simple Mail Transfer Protocol）<ul><li>属于TCP&#x2F;IP协议族</li><li>控制信件的中转方式，帮助找到下一个目的地</li><li>SMTP邮件服务器</li><li>发送协议</li></ul></li><li>POP3协议（Post  Office Protocol - version 3）<ul><li>属于TCP&#x2F;IP协议族</li><li>远程管理自己在服务器上的邮件</li><li>POP服务器</li><li>接收协议（登录管理协议）</li></ul></li></ul></li><li><p>邮件服务器</p><p>要在网络上实现邮件功能，要使用专门的邮件服务器。</p><ul><li>SMTP服务器 ：一般是smtp.xxx.com。如163邮箱smtp.163.com，QQ邮箱smtp.qq.com。</li><li>POP服务器：一般是pop.xxx.com。如163邮箱pop.163.com，QQ邮箱pop.qq.com。</li></ul></li></ol><h2 id="邮件发送实现"><a href="#邮件发送实现" class="headerlink" title="邮件发送实现"></a>邮件发送实现</h2><blockquote><ul><li><p>需要JavaMail API 和 Java Activation Framework</p></li><li><p>对应两个jar包：mail.jar  activation.jar</p></li><li><p>要发送邮件 需要获得协议和支持 开启服务POP3&#x2F;SMTP服务</p></li><li><p>普通邮件：不包含附件和图片，纯文本邮件</p></li><li><p>复杂邮件：非纯文本邮件</p></li></ul></blockquote><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.mail/mail --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;groupId&gt;javax.mail&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;artifactId&gt;mail&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;version&gt;1.4.7&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    上面那个包会出错 大概是ssl协议的问题 换成下下面这个包就可以了</span></span><br><span class="line"><span class="comment">或者  打开java安装路径-&gt;jre/lib/security</span></span><br><span class="line"><span class="comment">然后编辑java.security文件，把SSLv3跟TSL开头的都删掉，然后重启一下服务</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.sun.mail/javax.mail --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.activation/activation --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>核心类介绍</p><ul><li><p>Session对象</p><p>定义整个程序所需环境信息，比如主机名、端口号、采用的邮件发送协议和接收协议</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取实例对象</span></span><br><span class="line">Session <span class="title function_">getDefaultInstance</span><span class="params">(Properties props)</span></span><br><span class="line"></span><br><span class="line">Session <span class="title function_">getDefaultInstance</span><span class="params">(Properties props, Authenticator authenticator)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 开启Debug模式</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setDebug</span><span class="params">(<span class="type">boolean</span> debug)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 获取Transport对象</span></span><br><span class="line">Transport <span class="title function_">getTransport</span><span class="params">()</span></span><br></pre></td></tr></table></figure></li><li><p>Transport对象</p><p>用来发送邮件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接到邮件服务器</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">connect</span><span class="params">(String host, String user, String password)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 发送邮件</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(Message var1, Address[] var2)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span></span><br></pre></td></tr></table></figure></li><li><p>Message对象</p><p>表示一封电子邮件，被Transport对象引用</p></li><li><p>Store对象</p><p>用来接收邮件，被Session对象引用，同时创建Message对象</p></li><li><p>MailSSLSocketFactory</p><p>设置SSL加密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SSL加密：QQ邮箱需要设置，通过以下4行代码</span></span><br><span class="line"><span class="type">MailSSLSocketFactory</span> <span class="variable">mssf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MailSSLSocketFactory</span>();</span><br><span class="line">mssf.setTrustAllHosts(<span class="literal">true</span>);</span><br><span class="line">prop.put(<span class="string">&quot;mail.smtp.ssl.enable&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">prop.put(<span class="string">&quot;mail.smtp.ssl.socketFactory&quot;</span>, mssf);</span><br></pre></td></tr></table></figure></li><li><p>MimePart接口实现类：MimeMessage类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置发件人</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">setFrom</span><span class="params">(Address address)</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 设置收件人</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">setRecipient</span><span class="params">(Message.RecipientType type, Address address)</span></span><br><span class="line">      </span><br><span class="line">  <span class="comment">// 设置主题</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">setSubject</span><span class="params">(String subject)</span></span><br><span class="line">      </span><br><span class="line">  <span class="comment">// 设置内容</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(Object o, String type)</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 保存修改：添加图片、附件时需要</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">saveChanges</span><span class="params">()</span></span><br></pre></td></tr></table></figure></li><li><p>MimePart接口实现类：MimeBodyPart类</p><p>复杂邮件所需</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文本：设置内容</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(Object o, String type)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 图片、附件：设置数据处理</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">setDataHandler</span><span class="params">(DataHandler dh)</span></span><br><span class="line">      </span><br><span class="line">  <span class="comment">// 图片：设置CID，在文本中通过src引用</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">setContentID</span><span class="params">(String cid)</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 附件：设置附件名</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">setFileName</span><span class="params">(String filename)</span></span><br></pre></td></tr></table></figure></li><li><p>MimePart接口实现类：MimeMultiPart类</p><p>组合多个代表MIME消息的MimeBodyPart对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加MIME消息</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addBodyPart</span><span class="params">(BodyPart part)</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 描述数据关系：alternative/related/mixed</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setSubType</span><span class="params">(String subtype)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>步骤</p><ol><li>创建Session对象</li><li>获得Transport对象</li><li>创建邮件（<strong>普通邮件和复杂邮件有区别</strong>）</li><li>发送Message，关闭连接</li></ol></li></ul><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><ul><li>发送简单邮件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.yiochin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.mail.util.MailSSLSocketFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送简单邮件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailSend01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//set qq mail server</span></span><br><span class="line">        prop.setProperty(<span class="string">&quot;mail.host&quot;</span>,<span class="string">&quot;smtp.qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">//set send protocol</span></span><br><span class="line">        prop.setProperty(<span class="string">&quot;mail.transport.protocol&quot;</span>,<span class="string">&quot;smtp&quot;</span>);</span><br><span class="line">        <span class="comment">//validate name and password</span></span><br><span class="line">        prop.setProperty(<span class="string">&quot;mail.smtp.auth&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//qq need ssl</span></span><br><span class="line">        <span class="type">MailSSLSocketFactory</span> <span class="variable">sf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MailSSLSocketFactory</span>();</span><br><span class="line">        sf.setTrustAllHosts(<span class="literal">true</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;mail.smtp.ssl.enable&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;mail.smtp.ssl.socketFactory&quot;</span>,sf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// use Java send a mail needs 5 steps</span></span><br><span class="line">        <span class="comment">// 1、创建定义整个应用程序所需要的环境信息的Session对象</span></span><br><span class="line">        <span class="comment">// qq needs others dont</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> Session.getDefaultInstance(prop, <span class="keyword">new</span> <span class="title class_">Authenticator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> PasswordAuthentication <span class="title function_">getPasswordAuthentication</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//username validation</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PasswordAuthentication</span>(<span class="string">&quot;****@qq.com&quot;</span>,<span class="string">&quot;****&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 开始Session的debug模式可以看到程序发送email的运行状态</span></span><br><span class="line">        session.setDebug(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、通过Session得到Transport对象</span></span><br><span class="line">        <span class="type">Transport</span> <span class="variable">ts</span> <span class="operator">=</span> session.getTransport();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、使用邮箱的用户名和授权码连上邮件服务器</span></span><br><span class="line">        ts.connect(<span class="string">&quot;smtp.qq.com&quot;</span>,<span class="string">&quot;****@qq.com&quot;</span>, <span class="string">&quot;****&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、创建邮件</span></span><br><span class="line">        <span class="comment">// 创建邮件对象</span></span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessage</span>(session);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指明邮件发件人</span></span><br><span class="line">        message.setFrom(<span class="keyword">new</span> <span class="title class_">InternetAddress</span>(<span class="string">&quot;****@qq.com&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指明收件人</span></span><br><span class="line">        message.setRecipient(Message.RecipientType.TO, <span class="keyword">new</span> <span class="title class_">InternetAddress</span>(<span class="string">&quot;****@163.com&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 邮件的标题</span></span><br><span class="line">        message.setSubject(<span class="string">&quot;This is a simple email sent by Java.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 邮件的文本内容</span></span><br><span class="line">        message.setContent(<span class="string">&quot;Hello World!&quot;</span>,<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、发送邮件，关闭连接</span></span><br><span class="line">        ts.sendMessage(message,message.getAllRecipients());</span><br><span class="line"></span><br><span class="line">        ts.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>发送复杂邮件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.yiochin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.mail.util.MailSSLSocketFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.activation.DataHandler;</span><br><span class="line"><span class="keyword">import</span> javax.activation.FileDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.mail.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.*;</span><br><span class="line"><span class="keyword">import</span> java.security.GeneralSecurityException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailSend02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">MailSend02</span> <span class="variable">mailSend02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MailSend02</span>();</span><br><span class="line">        mailSend02.sendMail();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sendMail</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException, GeneralSecurityException &#123;</span><br><span class="line">        <span class="comment">// set properties</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> <span class="string">&quot;smtp.qq.com&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">authCode</span> <span class="operator">=</span> <span class="string">&quot;wlnjptkrsfuebhjc&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">addresser</span> <span class="operator">=</span> <span class="string">&quot;397040338@qq.com&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">addressee</span> <span class="operator">=</span> <span class="string">&quot;18326497503@163.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Configuration parameters</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.setProperty(<span class="string">&quot;mail.host&quot;</span>,host);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;mail.transport.protocol&quot;</span>,<span class="string">&quot;smtp&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;mail.smtp.auth&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// SSL</span></span><br><span class="line">        <span class="type">MailSSLSocketFactory</span> <span class="variable">mailSSLSocketFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MailSSLSocketFactory</span>();</span><br><span class="line">        mailSSLSocketFactory.setTrustAllHosts(<span class="literal">true</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;mail.smtp.ssl.enable&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;mail.smtp.ssl.socketFactory&quot;</span>,mailSSLSocketFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建定义整个应用程序所需要的环境信息的Session对象</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> Session.getDefaultInstance(prop, <span class="keyword">new</span> <span class="title class_">Authenticator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> PasswordAuthentication <span class="title function_">getPasswordAuthentication</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PasswordAuthentication</span>(addresser, authCode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启debug</span></span><br><span class="line">        session.setDebug(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、通过Session得到Transport对象</span></span><br><span class="line">        <span class="type">Transport</span> <span class="variable">ts</span> <span class="operator">=</span> session.getTransport();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、使用邮箱的用户名和授权码连上邮件服务器</span></span><br><span class="line">        ts.connect(host,addresser,authCode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、创建邮件</span></span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> makeMixedMessage(session, addresser, addressee);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、发送邮件，关闭连接</span></span><br><span class="line">        ts.sendMessage(message, message.getAllRecipients());</span><br><span class="line"></span><br><span class="line">        ts.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建复杂邮件</span></span><br><span class="line">    <span class="keyword">private</span> MimeMessage <span class="title function_">makeMixedMessage</span><span class="params">(Session session,String addresser,String addressee)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessage</span>(session);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sender</span></span><br><span class="line">        message.setFrom(<span class="keyword">new</span> <span class="title class_">InternetAddress</span>(addresser));</span><br><span class="line">        <span class="comment">//receiver</span></span><br><span class="line">        message.setRecipient(Message.RecipientType.TO,<span class="keyword">new</span> <span class="title class_">InternetAddress</span>(addressee));</span><br><span class="line">        <span class="comment">//subject</span></span><br><span class="line">        message.setSubject(<span class="string">&quot;This is a mixed email&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// text</span></span><br><span class="line">        <span class="type">MimeBodyPart</span> <span class="variable">textPart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeBodyPart</span>();</span><br><span class="line">        textPart.setContent(<span class="string">&quot;There is a picture to you: &lt;img src=&#x27;cid:img&#x27;&gt;This&quot;</span>,<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// picture</span></span><br><span class="line">        <span class="type">MimeBodyPart</span> <span class="variable">imgPart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeBodyPart</span>();</span><br><span class="line">        <span class="type">DataHandler</span> <span class="variable">dataHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataHandler</span>(<span class="keyword">new</span> <span class="title class_">FileDataSource</span>(<span class="string">&quot;src\\main\\resources\\img\\img.png&quot;</span>));</span><br><span class="line">        imgPart.setDataHandler(dataHandler);</span><br><span class="line">        imgPart.setContentID(<span class="string">&quot;img&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// attachment</span></span><br><span class="line">        <span class="type">MimeBodyPart</span> <span class="variable">attachPart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeBodyPart</span>();</span><br><span class="line">        <span class="type">DataHandler</span> <span class="variable">dataHandler1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataHandler</span>(<span class="keyword">new</span> <span class="title class_">FileDataSource</span>(<span class="string">&quot;src\\main\\resources\\md\\test.md&quot;</span>));</span><br><span class="line">        attachPart.setDataHandler(dataHandler1);</span><br><span class="line">        attachPart.setFileName(<span class="string">&quot;fileUpload.md&quot;</span>);<span class="comment">//have a suffix name better</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//describe data relationship：alternative/related/mixed</span></span><br><span class="line">        <span class="type">MimeMultipart</span> <span class="variable">mm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMultipart</span>();</span><br><span class="line">        mm.addBodyPart(textPart);</span><br><span class="line">        mm.addBodyPart(attachPart);</span><br><span class="line">        mm.addBodyPart(imgPart);</span><br><span class="line">        mm.setSubType(<span class="string">&quot;mixed&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set to MimeMessage message and save modification</span></span><br><span class="line">        message.setContent(mm);</span><br><span class="line">        message.saveChanges();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JavaWeb实现"><a href="#JavaWeb实现" class="headerlink" title="JavaWeb实现"></a>JavaWeb实现</h2><blockquote><ul><li>网站的注册功能通常有邮件的激活步骤，用到了邮件的发送</li><li>javax.mail、activation、servlet-api、jsp-api、jstl、lombok、junit</li></ul></blockquote><ul><li><p>目录结构：</p><p><img src="https://cdn.jsdelivr.net/gh/iuning/myPictures/image-20220325162626965.png" alt="image-20220325162626965">4</p><p><img src="https://cdn.jsdelivr.net/gh/iuning/myPictures/image-20220325162715911.png" alt="image-20220325162715911"></p></li><li><p>前端</p><ul><li><p>register.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;register.do&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">        账号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">        密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">        邮箱：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;mail&quot;</span>&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;|&lt;input type=<span class="string">&quot;reset&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>seccess.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: oho</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">25</span></span><br><span class="line">  Time: <span class="number">15</span>:<span class="number">24</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;成功&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;$&#123;msg&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegisterServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">mailAddress</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;mail&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(username, password, mailAddress);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动线程来发送邮件，优化注册等待时间</span></span><br><span class="line">        <span class="type">MailThread</span> <span class="variable">mailThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MailThread</span>(user);</span><br><span class="line">        mailThread.start();<span class="comment">//run只是调用方法 start才是开始多线程</span></span><br><span class="line"></span><br><span class="line">        req.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;注册成功，稍后会收到一封邮件&quot;</span>);</span><br><span class="line"></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/success.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--把这里的约束换成最新的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">         http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>RegisterServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>xyz.yiochin.servlet.RegisterServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>RegisterServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/register.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/register.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>实体类：User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String mailAddress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>工具类：MailThread</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> <span class="string">&quot;smtp.qq.com&quot;</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">authCode</span> <span class="operator">=</span> <span class="string">&quot;wlnjptkrsfuebhjc&quot;</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">addresser</span> <span class="operator">=</span> <span class="string">&quot;397040338@qq.com&quot;</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MailThread</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//配置参数</span></span><br><span class="line">            <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            prop.setProperty(<span class="string">&quot;mail.host&quot;</span>,host);</span><br><span class="line">            prop.setProperty(<span class="string">&quot;mail.transport.protocol&quot;</span>,<span class="string">&quot;smtp&quot;</span>);</span><br><span class="line">            prop.setProperty(<span class="string">&quot;mail.stmp.auth&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//SSL</span></span><br><span class="line">            <span class="type">MailSSLSocketFactory</span> <span class="variable">mailSSLSocketFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MailSSLSocketFactory</span>();</span><br><span class="line">            mailSSLSocketFactory.setTrustAllHosts(<span class="literal">true</span>);</span><br><span class="line">            prop.put(<span class="string">&quot;mail.smtp.ssl.enable&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">            prop.put(<span class="string">&quot;mail.stmp.ssl.socketFactory&quot;</span>,mailSSLSocketFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 1、创建Session</span></span><br><span class="line">            <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> Session.getDefaultInstance(prop, <span class="keyword">new</span> <span class="title class_">Authenticator</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> PasswordAuthentication <span class="title function_">getPasswordAuthentication</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PasswordAuthentication</span>(addresser, authCode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            session.setDebug(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 2、session 得到 transport</span></span><br><span class="line">            <span class="type">Transport</span> <span class="variable">ts</span> <span class="operator">=</span> session.getTransport();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3、使用用户名和授权码链接服务器</span></span><br><span class="line">            ts.connect(host,addresser,authCode);</span><br><span class="line">            <span class="comment">// 4、创建邮件</span></span><br><span class="line">            <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessage</span>(session);</span><br><span class="line">            message.setFrom(addresser);</span><br><span class="line">            message.setRecipient(Message.RecipientType.TO,<span class="keyword">new</span> <span class="title class_">InternetAddress</span>(user.getMailAddress()));</span><br><span class="line">            message.setSubject(<span class="string">&quot;用户注册邮件&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="string">&quot;注册成功，您的用户名：&quot;</span>+user.getUsername()+<span class="string">&quot;，密码&quot;</span>+user.getPassword();</span><br><span class="line">            <span class="comment">//test</span></span><br><span class="line">            System.out.println(<span class="string">&quot;=======================================&quot;</span>);</span><br><span class="line">            System.out.println(user.getUsername() +<span class="string">&quot;:&quot;</span>+user.getPassword());</span><br><span class="line">            System.out.println(<span class="string">&quot;=======================================&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            message.setContent(info,<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5、发送邮件，关闭连接</span></span><br><span class="line">            ts.sendMessage(message,<span class="keyword">new</span> <span class="title class_">InternetAddress</span>[]&#123;<span class="keyword">new</span> <span class="title class_">InternetAddress</span>(user.getMailAddress())&#125;);</span><br><span class="line">            ts.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (GeneralSecurityException | MessagingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java文件传输和上传</title>
      <link href="/p/48dafabf.html"/>
      <url>/p/48dafabf.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>用到的包：common-io、common-fileload</p></blockquote><h2 id="文件上传调优（注意事项）："><a href="#文件上传调优（注意事项）：" class="headerlink" title="文件上传调优（注意事项）："></a>文件上传调优（注意事项）：</h2><ul><li><p>为保证服务器安全，上传的文件应该放在外界无法直接访问的目录下，比如说WEB-INF目录下</p></li><li><p>为防止文件覆盖的现象发生，要为上传的文件产生唯一的文件名</p></li><li><p>要限制上传文件的最大值</p></li><li><p>可以限制文件的类型，在收到文件名时，判断后缀名是否合法</p></li><li><p>ServletFileUpload负责处理上传的文件数据，并将表单中每个输入项封装成一个FileItem对象，在使用ServletFileUpload对象解析请求时需要DiskFileItemFactory对象。所以我们需要在进行解析工作前构造好DiskFileItemFactory对象，通过ServletFileUpload对象的构造方法或setFileItemFactory()方法设置ServletFileUpload对象的fileItemFactory属性。</p></li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li>页面必须包含一个type为file的表单</li></ul><blockquote><p>method必须为post因为get限制了大小</p></blockquote><ul><li>ddfa.jsp</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/upload.do&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;上传用户：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;|&lt;input type=<span class="string">&quot;reset&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>index.jsp(success.jsp)</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;FileUpload&lt;/title&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;renderer&quot;</span> content=<span class="string">&quot;webkit&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;/css/layui.css&quot;</span> tppabs=<span class="string">&quot;/css/layui.css&quot;</span>  media=<span class="string">&quot;all&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 注意：如果你直接复制所有代码到本地，上述css路径需要改成你本地的 --&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;$&#123;msg&#125;&lt;/p&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   &lt;!-- 后续页面美化可以使用layui实现 --&gt;</span><br><span class="line">&lt;fieldset class=<span class="string">&quot;layui-elem-field layui-field-title&quot;</span> style=<span class="string">&quot;margin-top: 30px;&quot;</span>&gt;</span><br><span class="line">    &lt;legend&gt;拖拽上传&lt;/legend&gt;</span><br><span class="line">&lt;/fieldset&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;layui-upload-drag&quot;</span> id=<span class="string">&quot;test10&quot;</span>&gt;</span><br><span class="line">    &lt;i class=<span class="string">&quot;layui-icon&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">    &lt;p&gt;点击上传，或将文件拖拽到此处&lt;/p&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;layui-hide&quot;</span> id=<span class="string">&quot;uploadDemoView&quot;</span>&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;&quot;</span> alt=<span class="string">&quot;上传成功后渲染&quot;</span> style=<span class="string">&quot;max-width: 196px&quot;</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;/js/layui.js&quot;</span> charset=<span class="string">&quot;utf-8&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 注意：如果你直接复制所有代码到本地，上述 JS 路径需要改成你本地的 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    layui.use([<span class="string">&#x27;upload&#x27;</span>, <span class="string">&#x27;element&#x27;</span>, <span class="string">&#x27;layer&#x27;</span>], function()&#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">$</span> <span class="operator">=</span> layui.jquery</span><br><span class="line">            ,upload = layui.upload</span><br><span class="line">            ,element = layui.element</span><br><span class="line">            ,layer = layui.layer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//拖拽上传</span></span><br><span class="line">        upload.render(&#123;</span><br><span class="line">            elem: <span class="string">&#x27;#test10&#x27;</span></span><br><span class="line">            ,url: <span class="string">&#x27;$&#123;pageContext.request.contextPath&#125;/upload.do&#x27;</span> <span class="comment">//此处用的是第三方的 http 请求演示，实际使用时改成您自己的上传接口即可。</span></span><br><span class="line">            ,done: function(res)&#123;</span><br><span class="line">                layer.msg(<span class="string">&#x27;上传成功&#x27;</span>);</span><br><span class="line">                layui.$(<span class="string">&#x27;#uploadDemoView&#x27;</span>).removeClass(<span class="string">&#x27;layui-hide&#x27;</span>).find(<span class="string">&#x27;img&#x27;</span>).attr(<span class="string">&#x27;src&#x27;</span>, res.files.file);</span><br><span class="line">                console.log(res)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>FileUploadController：doPost</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="comment">// 判断表单是否包含文件上传控件</span></span><br><span class="line">       <span class="keyword">if</span> (!ServletFileUpload.isMultipartContent(req))&#123;</span><br><span class="line">           <span class="comment">// 不包含文件上传控件，即普通表单</span></span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//创建文件保存路径，外界无法访问</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">uploadPath</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext().getRealPath(<span class="string">&quot;/WEB-INF/upload&quot;</span>);</span><br><span class="line">       <span class="type">File</span> <span class="variable">uploadFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadPath);</span><br><span class="line">       makeIfNotExists(uploadFile);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//创建临时文件保存路径</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">tmpPath</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext().getRealPath(<span class="string">&quot;/WEB-INF/tmp&quot;</span>);</span><br><span class="line">       <span class="type">File</span> <span class="variable">tmpFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(tmpPath);</span><br><span class="line">       makeIfNotExists(tmpFile);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 1.创建DiskFileItemFactory对象</span></span><br><span class="line">       <span class="type">DiskFileItemFactory</span> <span class="variable">factory</span> <span class="operator">=</span> getDiskFileItemFactory(tmpFile);</span><br><span class="line">       <span class="comment">// 2.创建ServletFileUpload对象</span></span><br><span class="line">       <span class="type">ServletFileUpload</span> <span class="variable">servletFileUpload</span> <span class="operator">=</span> getServletFileUpload(factory);</span><br><span class="line">       <span class="comment">// 3.解析请求并处理文件传输</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span><span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           msg = uploadParseRequest(req,servletFileUpload,uploadPath);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (FileUploadException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       req.setAttribute(<span class="string">&quot;msg&quot;</span>,msg);</span><br><span class="line">       req.getRequestDispatcher(<span class="string">&quot;/index.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>getDiskFileItemFactory：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得文件项目工程，设置缓冲文件夹以及缓冲区大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tmpFile 缓冲文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> DiskFileItemFactory <span class="title function_">getDiskFileItemFactory</span><span class="params">(File tmpFile)</span>&#123;</span><br><span class="line">        <span class="type">DiskFileItemFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DiskFileItemFactory</span>();</span><br><span class="line">        factory.setSizeThreshold(<span class="number">1024</span>*<span class="number">1024</span>);<span class="comment">//超出缓冲区使用临时文件缓存上传</span></span><br><span class="line">        factory.setRepository(tmpFile);<span class="comment">//临时文件夹</span></span><br><span class="line">      </span><br></pre></td></tr></table></figure><ul><li>getSercletFileUpload：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ServletFileUpload <span class="title function_">getServletFileUpload</span><span class="params">(DiskFileItemFactory factory)</span>&#123;</span><br><span class="line">      <span class="type">ServletFileUpload</span> <span class="variable">servletFileUpload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletFileUpload</span>();</span><br><span class="line">      servletFileUpload.setFileItemFactory(factory);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 辅助功能</span></span><br><span class="line">      <span class="comment">//监听文件上传进度</span></span><br><span class="line">      servletFileUpload.setProgressListener(<span class="keyword">new</span> <span class="title class_">ProgressListener</span>() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="comment">//已读文件大小 文件大小</span></span><br><span class="line">          <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">long</span> pBytesRead, <span class="type">long</span> pContentLength, <span class="type">int</span> pItems)</span> &#123;</span><br><span class="line">              <span class="type">String</span> <span class="variable">percentage</span> <span class="operator">=</span> (<span class="type">int</span>) (((<span class="type">double</span>)pBytesRead / pContentLength) *<span class="number">100</span>) +<span class="string">&quot;%&quot;</span>;</span><br><span class="line">              System.out.println(<span class="string">&quot;总大小：&quot;</span>+pContentLength+<span class="string">&quot;，已上传：&quot;</span>+pBytesRead +<span class="string">&quot;\t&quot;</span> + percentage);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 处理乱码问题</span></span><br><span class="line">      servletFileUpload.setHeaderEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">      <span class="comment">// 设置单个文件的最大值</span></span><br><span class="line">      servletFileUpload.setFileSizeMax(<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">10</span>);</span><br><span class="line">      <span class="comment">//设置总文件的最大值</span></span><br><span class="line">      servletFileUpload.setSizeMax(<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> servletFileUpload;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>uploadParseRequest：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">uploadParseRequest</span><span class="params">(HttpServletRequest req,ServletFileUpload servletFileUpload,String uploadPath)</span> <span class="keyword">throws</span> FileUploadException, IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析前端请求 将每个表单项解析并封装成FileItem对象；</span></span><br><span class="line">    List&lt;FileItem&gt; fileItems  = servletFileUpload.parseRequest(req);</span><br><span class="line">    <span class="keyword">for</span> (FileItem fileItem : fileItems) &#123;</span><br><span class="line">        <span class="comment">//判断表单项是否为上传文件</span></span><br><span class="line">        <span class="keyword">if</span> (fileItem.isFormField())&#123;</span><br><span class="line">            <span class="comment">//普通文本</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> fileItem.getFieldName();<span class="comment">//获取字段名：表达name的属性的值</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> fileItem.getString(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            System.out.println(fieldName+<span class="string">&quot;:&quot;</span>+value);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 上传文件</span></span><br><span class="line">            <span class="comment">// 1.处理文件</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">uploadFileName</span> <span class="operator">=</span> fileItem.getName();<span class="comment">//上传文件名</span></span><br><span class="line">            System.out.println(<span class="string">&quot;the name of uploaded file:&quot;</span>+uploadFileName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (uploadFileName == <span class="literal">null</span> || uploadFileName.trim().equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileExtName</span> <span class="operator">=</span> uploadFileName.substring(uploadFileName.lastIndexOf(<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);<span class="comment">//文件后缀</span></span><br><span class="line">            System.out.println(<span class="string">&quot;info about the file: [name:&quot;</span>+uploadFileName+<span class="string">&quot;  extname:&quot;</span>+fileExtName+<span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// use uuid make it unique</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">uuidPath</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.处理路径</span></span><br><span class="line">            <span class="comment">// storePath: uploadpath 目录下的 唯一目录</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> uploadPath + <span class="string">&quot;/&quot;</span> + uuidPath;</span><br><span class="line">            <span class="type">File</span> <span class="variable">realPathFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath);</span><br><span class="line">            makeIfNotExists(realPathFile);</span><br><span class="line">            <span class="comment">// 3.文件传输</span></span><br><span class="line">            <span class="comment">// get inputStream</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> fileItem.getInputStream();</span><br><span class="line">            <span class="comment">// get outputStream write into a unique dir as a file</span></span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(realPathFile+<span class="string">&quot;/&quot;</span>+uploadFileName);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//make cache</span></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                outputStream.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            msg = <span class="string">&quot;文件上传成功&quot;</span>;</span><br><span class="line"></span><br><span class="line">            fileItem.delete();<span class="comment">//上传成功，清除临时文件</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//close IOStream</span></span><br><span class="line">            outputStream.close();</span><br><span class="line">            is.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>makeIfNotExists：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">makeIfNotExists</span><span class="params">(File file)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">         file.mkdir();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>web.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--把这里的约束换成最新的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">         http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FileUpload<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>xyz.yiochin.controller.FileController<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FileUpload<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/upload.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>xyz.yiochin.filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>/ddfa.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker网络</title>
      <link href="/p/3849e8ae.html"/>
      <url>/p/3849e8ae.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><strong>Docker容器的本质是 共享内核，资源隔离、资源限制、文件系统rootfs</strong></p><p><strong>Docker网络的实现主要就是如何在共享内核的基础上，实现socket的隔离，虚拟设备的隔离和通信.</strong></p><h3 id="虚拟网络接口"><a href="#虚拟网络接口" class="headerlink" title="虚拟网络接口"></a>虚拟网络接口</h3><p>​Linux网络协议栈中，IP层不与物理网络设备（网络驱动）直接通信，而是和抽象的网络接口（lo、eth0、eth1等）交互。这为Docker不同容器中能够模拟网络环境提供的基础。</p><ul><li><p>主机上的通信</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090103690.png" alt="img"></p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090103691.png" alt="img"></p></li><li><p>虚拟机的通信</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090103692.png" alt="img"></p></li><li><p>Docker的通信</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090103693.png" alt="img"></p></li></ul><h3 id="namespase"><a href="#namespase" class="headerlink" title="namespase"></a>namespase</h3><p>​Docker是轻量级的虚拟化，他和虚拟机的一个主要区别是不同的Docker容器<strong>共享Linux内核</strong>。 共享内核就会存在<strong>资源可见性</strong>的问题。为此，Linux支持为不同资源设置不同的namespace，不同namespace的资源相互隔离、相互不可见。</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090103694.png" alt="img"></p><h3 id="veth"><a href="#veth" class="headerlink" title="veth"></a>veth</h3><p>​namespace用于实现网络资源的隔离，但是Docker容器与宿主机经常需要进行通信，这就需要Linux系统中veth-pair技术的支持。</p><p>​veth是虚拟网络设备接口，它<strong>总是成对出现</strong>，用于连通两个namespace（容器与容器、容器与宿主机）。从其中一个端口发出的数据包，可以直接出现在与它对应的另一个端口上。</p><p>​查看网络接口：<code>ip link show</code></p><p>​查看网络信息：<code>ip addr</code>、<code>ifconfig</code>、</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090103695.png" alt="img"></p><h3 id="bridge"><a href="#bridge" class="headerlink" title="bridge"></a>bridge</h3><p>​Linux网络内核引入网桥bridge来实现多个网络接口之间的通信，可以将一台机器上的若干接口连通起来。在OSI网络模型中，网桥属于数据链路层。</p><p>​查看网桥的连接：<code>bridge link</code></p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090103696.png" alt="img"></p><h3 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h3><p>​Linux网络内核通过路由表来指定数据包的转发路径。 一台Linux主机里可能有多个虚拟网络接口、多个物理网络设备，在TCP&#x2F;IP协议中，IP数据包里包含了目的地址，但是并不知道如何到达目标地址。路由表则用于指示要抵达目的地址，数据包下一条应该先到哪里去。</p><p>​查看路由表：<code>route -n</code></p><h2 id="Docker的网络模式"><a href="#Docker的网络模式" class="headerlink" title="Docker的网络模式"></a>Docker的网络模式</h2><p>可以通过<code>docker network ls</code>查看网络，默认创建三种网络：<code>bridge</code>、<code>host</code>、<code>none</code>。</p><p>###Docker的几种网络模型</p><ul><li><strong>bridge：</strong> Docker容器有自己的Network-Namesapce，通过veth-pair和Linux-Bridge技术实现容器与宿主机的网络通信。<strong>brige模式是Docker的默认网络模式。</strong></li><li><strong>host：</strong> Docker容器与宿主机共享网络，容器不会有自己的Network-Namesapce，与宿主机不进行网络隔离。</li><li><strong>overlay：</strong> 将多个Docker Daemon连接到一起。</li><li><strong>IPvlan：</strong> 用户可以完全控制IPv4和IPv6寻址。支持对二层VLAN tag和三层网络路由的完全控制。</li><li><strong>macvlan:</strong> 支持为容器设置mac地址，让Docker daemon能够基于Mac地址路由流量。</li><li><strong>none:</strong> 这种模式下的容器禁用所有网络。</li><li><strong>Network plugins:</strong> 安装使用第三方的Docker网络插件。</li></ul><h3 id="Bridge模式"><a href="#Bridge模式" class="headerlink" title="Bridge模式"></a>Bridge模式</h3><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090103697.png" alt="img"></p><p>​当<code>Docker</code>进程启动时，会在主机上创建一个名为<code>docker0</code>的虚拟网桥，此主机上启动的<code>Docker</code>容器会连接到这个虚拟网桥上，附加在其上的任何网卡之间都能自动转发数据包。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</p><p>​从<code>docker0</code>子网中分配一个 IP 给容器使用，并设置 <code>docker0</code> 的 IP 地址为容器的默认网关。在主机上创建一对虚拟网卡<code>veth pair</code>设备，<code>Docker</code> 将 <code>veth pair</code> 设备的一端放在新创建的容器中，并命名为<code>eth0</code>（容器的网卡），另一端放在主机中，以<code>vethxxx</code>这样类似的名字命名，并将这个网络设备加入到 <code>docker0</code> 网桥中。可以通过<code>brctl show</code>命令查看。</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090103698.png" alt="img"></p><h2 id="容器互联-link"><a href="#容器互联-link" class="headerlink" title="容器互联 -- link"></a>容器互联 <code>-- link</code></h2><p>###简介</p><p>​同一个宿主机上的多个docker容器之间可以通过使用容器的ip地址来通信，也可以通过宿主机的ip加上容器暴露出的端口号来通信，但是前者会导致ip地址的硬编码，不方便迁移，并且容器重启后ip地址会改变，除非使用固定的ip，而后者的通信方式比较单一，只能依靠监听在暴露出的端口的进程来进行有限的通信。</p><p>​相比之下，docker的<code>link</code>机制可以通过一个<code>name</code>来和另一个容器通信，<code>link</code>机制方便了容器去发现其它的容器并且可以进行一些安全的数据传递.</p><p>​例如：<code>docker run --name wordpress --link mysqldb:mysql -p 8080:80 -d wordpress</code>，其中<code>mysqldb</code>是容器名，<code>mysql</code>是自己起的别名<code>&lt;alias&gt;</code>。</p><p>​现在已经不推荐使用 <code>--link</code>了。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>​使用了<code>link</code>机制后，可以通过指定的名字来和目标容器通信，这通过设置环境变量和修改<code>/etc/hosts</code>文件的ip和容器映射来实现。</p><p>​docker会在接收容器(使用<code>--link</code>的容器)中设置名为<code>&lt;alias&gt;_NAME</code>的环境变量，该环境变量的值为：<code>&lt;alias&gt;_NAME=/接收容器名/源容器&lt;alias&gt;</code></p><p>​另外，docker还会在接收容器中创建关于源容器暴露的端口号的环境变量，这些环境变量有一个统一的前缀名称：</p><p>​<code>&lt;name&gt;_PORT_&lt;port&gt;_&lt;protocol&gt; = ***</code></p><p>​（其中：<code>&lt;name&gt;</code>表示链接的源容器<code>alias</code>;<code>&lt;port&gt;</code>是源容器暴露的端口号;<code>&lt;protocol&gt;</code>是通信协议：TCP or UDP）</p><p>​推荐使用自定义网络。</p><h2 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h2><blockquote><p>查看所有的docker网络–默认开启的</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090103699.png" alt="image-20220718224131129"></p><blockquote><p>实例测试</p></blockquote><ul><li><p>简介</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我们直接启动的命令 --net bridge，不写的时候也是默认启动docker0模式的网络</span></span><br><span class="line">docker run -d -P --name mysql01 mysql</span><br><span class="line">docker run -d -P --name mysql01 --net bridge mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">docker0 特点:默认、域名不能访问（name 达咩），可以使用 --<span class="built_in">link</span> 连接</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">高级一点</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">我们可以自定义一个网络 在这个网络中 容器可以直接相互连接</span></span><br><span class="line">Usage:  docker network create [OPTIONS] NETWORK</span><br><span class="line"></span><br><span class="line">Create a network</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --attachable           Enable manual container attachment</span><br><span class="line">      --aux-address map      Auxiliary IPv4 or IPv6 addresses used by</span><br><span class="line">                             Network driver (default map[])</span><br><span class="line">      --config-from string   The network from which to copy the configuration</span><br><span class="line">      --config-only          Create a configuration only network</span><br><span class="line">  -d, --driver string        Driver to manage the Network (default &quot;bridge&quot;)</span><br><span class="line">      --gateway strings      IPv4 or IPv6 Gateway for the master subnet</span><br><span class="line">      --ingress              Create swarm routing-mesh network</span><br><span class="line">      --internal             Restrict external access to the network</span><br><span class="line">      --ip-range strings     Allocate container ip from a sub-range</span><br><span class="line">      --ipam-driver string   IP Address Management Driver (default &quot;default&quot;)</span><br><span class="line">      --ipam-opt map         Set IPAM driver specific options (default map[])</span><br><span class="line">      --ipv6                 Enable IPv6 networking</span><br><span class="line">      --label list           Set metadata on a network</span><br><span class="line">  -o, --opt map              Set driver specific options (default map[])</span><br><span class="line">      --scope string         Control the network&#x27;s scope</span><br><span class="line">      --subnet strings       Subnet in CIDR format that represents a</span><br><span class="line">                             network segment</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>开始创建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--driver bridge</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--subnet 10.1.0.0/16 子网</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">192.168.0.0/24代表是A类地址，主机为8位，表示192.168.0固定，后面是可变，掩码为255.255.255.0。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">192.168.0.0/16代表B类地址，主机为16，表示192.168固定，后面是可用。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--gateway 10.1.0.1   网关 路由器地址</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">mynet 自定义网络的名字</span></span><br><span class="line">docker network create --driver bridge --subnet 10.1.0.0/16 --gateway 10.1.0.1 mynet</span><br><span class="line">28859b171621785d1905ce61c4f607e97d7666784ddff53b55d239df915a20ca</span><br><span class="line">docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">bb12db42a612   bridge    bridge    local</span><br><span class="line">8a88783267a2   host      host      local</span><br><span class="line">28859b171621   mynet     bridge    local</span><br><span class="line">dc411ab66580   none      null      local</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090103700.png" alt="image-20220718225930029"></p></li><li><p>创建容器进行测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[root@io yio]<span class="comment"># docker run -d -P --name tomcat-net-01 --net mynet tomcat  </span></span><br><span class="line">8d0e68b6f973392b8e4886bee199f94ab2e74a9f85ca11b72c4c3f5d8de021cf</span><br><span class="line">[root@io yio]<span class="comment"># docker run -d -P --name tomcat-net-02 --net mynet tomcat  </span></span><br><span class="line">19c44acd2ce7ac0bc2783d28fe381d22253aff122afd83975a42e2a85908a45b</span><br><span class="line">[root@io yio]<span class="comment"># docker inspect mynet</span></span><br><span class="line">[</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;     <span class="string">&quot;19c44acd2ce7ac0bc2783d28fe381d22253aff122afd83975a42e2a85908a45b&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tomcat-net-02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;aaf25223812cbbebea77884f98c5a167081928006827e09c29e18f477afc3d34&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:0a:01:00:03&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;10.1.0.3/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,            <span class="string">&quot;8d0e68b6f973392b8e4886bee199f94ab2e74a9f85ca11b72c4c3f5d8de021cf&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tomcat-net-01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;17f7119ef2e9c3de5b655baa7ebe282950ffd8bcf393fe40bfffefcdc4751baf&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:0a:01:00:02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;10.1.0.2/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">[root@io yio] <span class="comment"># docker exec -it tomcat-net-01 /bin/bash</span></span><br><span class="line">root@8d0e68b6f973:/usr/local/tomcat<span class="comment"># apt-get install inetutils-ping</span></span><br><span class="line">root@8d0e68b6f973:/usr/local/tomcat<span class="comment"># ping 10.1.0.3</span></span><br><span class="line">PING 10.1.0.3 (10.1.0.3): 56 data bytes</span><br><span class="line">64 bytes from 10.1.0.3: icmp_seq=0 ttl=64 time=0.189 ms</span><br><span class="line">64 bytes from 10.1.0.3: icmp_seq=1 ttl=64 time=0.157 ms</span><br><span class="line">64 bytes from 10.1.0.3: icmp_seq=2 ttl=64 time=0.091 ms</span><br><span class="line">64 bytes from 10.1.0.3: icmp_seq=3 ttl=64 time=0.110 ms</span><br><span class="line">^C--- 10.1.0.3 ping statistics ---</span><br><span class="line">20 packets transmitted, 20 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max/stddev = 0.091/0.170/0.250/0.046 ms</span><br><span class="line">[root@io yio] <span class="comment"># docker exec -it tomcat-net-02 /bin/bash</span></span><br><span class="line">root@19c44acd2ce7:/usr/local/tomcat<span class="comment"># apt-get update &amp;&amp; apt-get install inetutils-ping</span></span><br><span class="line">root@19c44acd2ce7:/usr/local/tomcat<span class="comment"># ping 10.1.0.2</span></span><br><span class="line">PING 10.1.0.2 (10.1.0.2): 56 data bytes</span><br><span class="line">64 bytes from 10.1.0.2: icmp_seq=0 ttl=64 time=0.213 ms</span><br><span class="line">64 bytes from 10.1.0.2: icmp_seq=1 ttl=64 time=0.147 ms</span><br><span class="line">64 bytes from 10.1.0.2: icmp_seq=2 ttl=64 time=0.170 ms</span><br><span class="line">64 bytes from 10.1.0.2: icmp_seq=3 ttl=64 time=0.156 ms</span><br><span class="line">64 bytes from 10.1.0.2: icmp_seq=4 ttl=64 time=0.197 ms</span><br><span class="line">^C--- 10.1.0.2 ping statistics ---</span><br><span class="line">5 packets transmitted, 5 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max/stddev = 0.147/0.177/0.213/0.025 ms</span><br><span class="line"><span class="comment"># 我们可以直接连接两个容器了，不需要使用--link了</span></span><br></pre></td></tr></table></figure></li><li><p>我们自定义的网络docker已经帮我们维护好了对应的关系，推荐这样使用网络。</p></li></ul><h2 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@io yio]<span class="comment"># docker network connect --help</span></span><br><span class="line">Usage:  docker network connect [OPTIONS] NETWORK CONTAINER</span><br><span class="line">Connect a container to a network</span><br><span class="line">Options:</span><br><span class="line">      --<span class="built_in">alias</span> strings           Add network-scoped <span class="built_in">alias</span> <span class="keyword">for</span> the container</span><br><span class="line">      --driver-opt strings      driver options <span class="keyword">for</span> the network</span><br><span class="line">      --ip string               IPv4 address (e.g., 172.30.100.104)</span><br><span class="line">      --ip6 string              IPv6 address (e.g., 2001:db8::33)</span><br><span class="line">      --<span class="built_in">link</span> list               Add <span class="built_in">link</span> to another container</span><br><span class="line">      --link-local-ip strings   Add a link-local address <span class="keyword">for</span> the container</span><br></pre></td></tr></table></figure><blockquote><p>小例子看一下</p></blockquote><ul><li><p>连接connect</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[root@io yio]<span class="comment"># docker run -d -P --name  tomcat01 tomcat </span></span><br><span class="line">250fb427dea0158f055d8063e6645d2e5be35248f5a81ef819835d8e0f85c488</span><br><span class="line">[root@io yio]<span class="comment"># docker exec -it tomcat01 bash</span></span><br><span class="line">root@250fb427dea0:/usr/local/tomcat<span class="comment"># apt-get update                   </span></span><br><span class="line">root@250fb427dea0:/usr/local/tomcat<span class="comment"># apt-get install inetutils-ping</span></span><br><span class="line">root@250fb427dea0:/usr/local/tomcat<span class="comment"># ping 10.1.0.2</span></span><br><span class="line">PING 10.1.0.2 (10.1.0.2): 56 data bytes</span><br><span class="line">^C--- 10.1.0.2 ping statistics ---</span><br><span class="line">9 packets transmitted, 0 packets received, 100% packet loss</span><br><span class="line"><span class="comment">#进行连通</span></span><br><span class="line">[root@io yio]<span class="comment"># docker network connect mynet tomcat01 </span></span><br><span class="line">[root@io yio]<span class="comment"># docker exec -it tomcat01 ping 10.1.0.2</span></span><br><span class="line">PING 10.1.0.2 (10.1.0.2): 56 data bytes</span><br><span class="line">64 bytes from 10.1.0.2: icmp_seq=0 ttl=64 time=0.172 ms</span><br><span class="line">64 bytes from 10.1.0.2: icmp_seq=1 ttl=64 time=0.250 ms</span><br><span class="line">64 bytes from 10.1.0.2: icmp_seq=2 ttl=64 time=0.148 ms</span><br><span class="line">^C--- 10.1.0.2 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max/stddev = 0.148/0.190/0.250/0.044 ms</span><br><span class="line"><span class="comment">#看一下自定义的网络</span></span><br><span class="line">[root@io yio]<span class="comment"># docker inspect mynet</span></span><br><span class="line">[</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;19c44acd2ce7ac0bc2783d28fe381d22253aff122afd83975a42e2a85908a45b&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tomcat-net-02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;aaf25223812cbbebea77884f98c5a167081928006827e09c29e18f477afc3d34&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:0a:01:00:03&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;10.1.0.3/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;250fb427dea0158f055d8063e6645d2e5be35248f5a81ef819835d8e0f85c488&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tomcat01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;0d0d279a755b1cac495682256f6bfdd913db35ebe5bdf8e30e800c701a25e506&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:0a:01:00:04&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;10.1.0.4/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;8d0e68b6f973392b8e4886bee199f94ab2e74a9f85ca11b72c4c3f5d8de021cf&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tomcat-net-01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;17f7119ef2e9c3de5b655baa7ebe282950ffd8bcf393fe40bfffefcdc4751baf&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:0a:01:00:02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;10.1.0.2/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>查看ip网络</p><p><code>ip addr</code></p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090103701.png" alt="image-20220718234105155"></p></li><li><p>再加一个容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@io yio]<span class="comment"># docker run -d -P --name tomcat02 tomcat  </span></span><br><span class="line">e561099a4ce4d540c1e46ab3c8537c0c05132fc2b57b7debc57e2b22e15162e5</span><br><span class="line"><span class="comment">#查看ip</span></span><br><span class="line">[root@io yio]<span class="comment"># ip addr</span></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090103702.png" alt="image-20220718234402463"></p><p>我们可以看到多了一对veth-pair</p></li><li><p>再将该容器接入mynet，查看ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@io yio]<span class="comment"># docker network connect mynet tomcat02</span></span><br><span class="line">[root@io yio]<span class="comment"># ip addr</span></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090103703.png" alt="image-20220718234613363"></p><p>看啊，他又多了一对。<strong>这相当于一个容器有了两个ip，就好像阿里云的一个公网ip，一个私网ip</strong></p></li><li><p>如果要跨网络操作别的容器，就需要使用<code>docker network connect</code>连通！！😯</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://cloud.tencent.com/developer/article/2048969#:~:text=Docker%E6%98%AF%E6%9C%8D,%E4%B8%BB%E6%9C%BA%E4%B8%8A%E8%BF%90%E8%A1%8C%E4%B8%80%E8%88%AC%E3%80%82">Docker 网络基础与实现 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></li><li><a href="https://www.cnblogs.com/zuxing/articles/8780661.html">https://www.cnblogs.com/zuxing/articles/8780661.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/366121703">Docker 网络 - 知乎 (zhihu.com)</a></li><li><a href="https://www.jianshu.com/p/21d66ca6115e">关于对docker run –link的理解 - 简书 (jianshu.com)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DockerFile</title>
      <link href="/p/f5f9fa9b.html"/>
      <url>/p/f5f9fa9b.html</url>
      
        <content type="html"><![CDATA[<h2 id="初识DockerFile"><a href="#初识DockerFile" class="headerlink" title="初识DockerFile"></a>初识DockerFile</h2><p>DockerFile就是用来构建docker镜像的构建文件，命令脚本。</p><p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本的每个命令都是一层。</p><p>小例子：</p><ul><li>dockerfile1</li></ul><figure class="highlight do"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">VOLUME [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>]</span><br><span class="line"></span><br><span class="line">CMD echo <span class="string">&quot;-------end-------&quot;</span></span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><ul><li><p><code>docker build -f dockerfile1 -t yio/centos:1.0 .</code> (-t 后不能以 “&#x2F;” 开头)</p></li><li><p>根据fockerfile创建容器镜像</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090102410.png" alt="image-20220716233049319"></p></li><li><p>运行容器，查看容器的文件目录</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090102411.png" alt="运行容器"></p></li><li><p>查看挂载目录的数据卷信息 <code>docker inspect [docker id]</code></p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090102412.png" alt="image-20220716233939299"></p></li><li><p>查看同步信息：</p><p><code>cd /var/lib/docker/volumes/873e4aad2ecc323526142d2a491d9ed51a0d762f6094cae5643469369c545ae7/_data</code><br><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090102413.png" alt="image-20220716234108711"></p></li><li><p>倘若使用DockerFile构建镜像时没有挂载卷，要手动挂载卷 <code>-v 卷名:容器内路径</code></p></li></ul><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p>例如多个MySQL同步数据</p><p>容器中的数据在容器删除后就会消失，$\textcolor{yellow}{所以需要持久化到本地}$。此时，我们可以使用<code>-v</code>来实现数据挂载到本地目录：</p><ul><li><code>-v :[容器内路径]</code>来实现<strong>匿名挂载</strong></li><li><code>-v [name]:[容器内路径]</code>来实现<strong>具名挂载</strong></li></ul><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090102414.png" alt="image-20220716234818879"></p><p>小例子：</p><ul><li><p>启动一个docker01</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090102415.png" alt="image-20220716235208104"></p></li><li><p>启动docker02</p><p><code>docker run -it --name docker02 --volumes-from docker01 66b</code></p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090102416.png" alt="image-20220716235507556"></p></li><li><p>在docker01中的volume01目录中创建数据，查看同步结果</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090102417.png" alt="image-20220716235734836"></p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090102418.png" alt="image-20220717000023463"></p></li><li><p>删除docker01文件仍然存在，类似于备份机制。都挂载在宿主机的同一个目录下。</p></li><li><p>结论：</p><p>数据卷容器的生命周期一直持续到没有容器使用为止。一旦持久化到了本地，本地数据就是不会删除的了。</p></li></ul><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><p>是用来构建docker镜像的文件，命令参数脚本。</p><h3 id="构建步骤："><a href="#构建步骤：" class="headerlink" title="构建步骤："></a>构建步骤：</h3><ol><li>编写一个dockerfile文件</li><li>docker build 构建成为一个镜像</li><li>docker run 运行镜像</li><li>docker push 发布镜像 （DocekrHub、阿里云镜像仓库）</li></ol><p>例如：</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090102419.png" alt="image-20220717001919508"></p><p>看一眼Centos的DockerFile</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090102420.png" alt="image-20220717002049690"></p><h3 id="DockerFile小知识"><a href="#DockerFile小知识" class="headerlink" title="DockerFile小知识"></a>DockerFile小知识</h3><ul><li><p><strong>基础知识</strong>：</p><ul><li>每个保留关键字（指令）都必须是大写字母</li><li>执行顺序按照从上到下</li><li><code>#</code> 表示注释</li><li>每一指令都会创建提交一个新的<strong>镜像层</strong>，并提交</li></ul></li><li><p>DockerFile 是面向开发的，也就是说我们以后发布项目做镜像，就需要编写dockerfile文件，这个文件十分简单！</p></li><li><p>tips：</p><ul><li>DockerFile：构建文件，定义了一切步骤，源代码文件</li><li>DockerImages：通过DockerFile构建生成的镜像，是最终发布和运行的产品</li><li>Docker容器：容器就是镜像运行起来的服务器</li></ul></li></ul><h3 id="DockerFile的指令"><a href="#DockerFile的指令" class="headerlink" title="DockerFile的指令"></a>DockerFile的指令</h3><table><thead><tr><th align="center"><code>FROM</code></th><th align="left">基础镜像，一切从这里开始构建</th></tr></thead><tbody><tr><td align="center"><code>MAINTAINER</code></td><td align="left">镜像的作者：姓名+邮箱</td></tr><tr><td align="center"><code>RUN</code></td><td align="left">镜像构建时需要运行的命令</td></tr><tr><td align="center"><code>CMD</code></td><td align="left">设置容器的启动命令  CMD &#x2F;bin&#x2F;bash   一个CMD执行多个只有最后一个会生效，可被替代。可以写多个CMD命令</td></tr><tr><td align="center"><code>COPY</code></td><td align="left">COPY &lt;源路径&gt;… &lt;目标路径&gt;，使用 COPY 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等</td></tr><tr><td align="center"><code>ADD</code></td><td align="left">复制文件到镜像中，ADD 指令和 COPY 的格式和性质基本一致。但是ADD的<code>&lt;源路径&gt;</code>可以是一个 URL，下载到<code>&lt;目标路径&gt;</code>去。</td></tr><tr><td align="center"><code>WORKDIR</code></td><td align="left"><code>WORKDIR /path/to/workdir</code>镜像的工作目录</td></tr><tr><td align="center"><code>VOLUME</code></td><td align="left">挂载的目录</td></tr><tr><td align="center"><code>ENTRYPOINT</code></td><td align="left">指定这个容器在启动时要运行的命令 可以追加命令。用于给容器配置一个可执行程序。也就是说，每次使用镜像创建容器时，通过 ENTRYPOINT 指定的程序都会被设置为默认程序</td></tr><tr><td align="center"><code>ONBUILD</code></td><td align="left"><code>ONBUILD ADD . /app/src ONBUILD RUN /usr/local/bin/python-build --dir /app/src</code>用于设置镜像触发器。当所构建的镜像被用做其它镜像的基础镜像，该镜像中的触发器将会被触发</td></tr><tr><td align="center"><code>EXPOSE</code></td><td align="left">暴露端口</td></tr><tr><td align="center"><code>ARG</code></td><td align="left"><code>ARG &lt;name&gt;[=&lt;default value&gt;]</code>用于指定传递给构建运行时的变量</td></tr><tr><td align="center"><code>STOPSIGNAL</code></td><td align="left">用于设置停止容器所要发送的系统调用信号，必须是内核系统调用表中的合法的值</td></tr><tr><td align="center"><code>SHELL</code></td><td align="left">用于设置执行命令（shell式）所使用的的默认 shell 类型，SHELL在Windows环境下比较有用，Windows 下通常会有 cmd 和 powershell 两种 shell，可能还会有 sh。这时就可以通过 SHELL 来指定所使用的 shell 类型</td></tr><tr><td align="center"><code>LABEL</code></td><td align="left"><code>LABEL version=&quot;1.0&quot; description=&quot;这是一个Web服务器&quot; by=&quot;IT笔录&quot;</code>用于为镜像添加元数据，以键值对的形式指定。推荐将所有的元数据通过一条LABEL指令指定，以免生成过多的中间镜像。</td></tr><tr><td align="center"><code>USER</code></td><td align="left"><code>USER user:group</code>用于指定运行镜像所使用的用户。使用USER指定用户时，可以使用用户名、UID 或 GID，或是两者的组合（使用 : 间隔）</td></tr><tr><td align="center"><code>ENV</code></td><td align="left"><code>K V </code>or<code>K=V</code> 形式。这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 RUN，还是运行时的应用，都可以直接使用这里定义的环境变量。</td></tr></tbody></table><blockquote><p><code>CMD</code>和<code>ENTRYPOINT</code>的区别</p><ul><li><p><code>CMD</code>的命令会被 <code>docker run</code> 的命令覆盖而 <code>ENTRYPOINT</code> 不会，且<code>ENTRYPOINT</code>可以追加命令</p></li><li><p><code>CMD </code>指令的目的是：为容器提供默认的执行命令。<br><code>CMD </code>指令有三种使用方式，其中的一种是为 <code>ENTRYPOINT </code>提供默认的参数：</p><ol><li><strong><code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code></strong> 写在<code>ENTRYPOINT</code>下面，将作为参数添加到<code>ENTRYPOINT []</code>中<br>另外两种使用方式分别是<code>exec </code>模式和<code>shell </code>模式：</li><li><strong><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code></strong>  &#x2F;&#x2F; 这是 exec 模式的写法，注意需要使用双引号。</li><li><strong><code>CMD command param1 param2</code></strong>         &#x2F;&#x2F; 这是 shell 模式的写法。<br>注意命令行参数可以覆盖 <code>CMD </code>指令的设置，但是只能是重写，却不能给 <code>CMD </code>中的命令通过命令行传递参数。</li></ol></li><li><p><code>ENTRYPOINT </code>指令的目的也是为容器指定默认执行的任务。<br><code>ENTRYPOINT </code>指令有两种使用方式，就是我们前面介绍的<code>exec </code>模式和<code>shell</code>模式：</p><ol><li><strong><code>ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code></strong>  &#x2F;&#x2F; 这是 exec 模式的写法，注意需要使用双引号。</li><li><strong><code>ENTRYPOINT command param1 param2</code></strong>          &#x2F;&#x2F; 这是 shell 模式的写法。<strong>会完全忽略命令行参数</strong><br><code>exec </code>模式和 <code>shell </code>模式的基本用法和 <code>CMD </code>指令是一样的，下面我们介绍一些比较特殊的用法。</li></ol><p><strong>指定 <code>ENTRYPOINT </code>指令为 <code>exec </code>模式时，<code>docker run</code>命令行上指定的参数会作为参数添加到 <code>ENTRYPOINT </code>指定命令的参数列表中。</strong></p></li><li><p>&#96;&#96;&#96;dockerfile<br>#1.如果dockerfile如下<br>FROM centos<br>CMD [“ls”,”-a”]<br>#2.构建<br>docker build -f dockerfile -t cmdtest<br>#3.run运行 发现 CMD命令运行正常<br>docker run cmdtest<br>#4.想追加命令 运行失败 -l 替换了 dockerfile中的CMD命令<br>docker run cmdtest -l<br>#5.新dockerfile<br>FROM centos<br>ENTRYPOINT [ “ls”, “-a” ]<br>CMD [“-l”]<br>#构建后运行<br>docker run cmdtest<br>#运行成功 最后执行的是 ls -a -l 命令<br>docker run cmdtest -S<br>#运行成功 最后执行的是 ls -a -S 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 实战测试</span><br><span class="line"></span><br><span class="line">Docker Hub中99%的镜像都是从这个基础镜像过来的： `FROM scratch`，然后再配置需要的软件和配置来进行构建。</span><br><span class="line"></span><br><span class="line">创建一个自己的Centos</span><br><span class="line"></span><br><span class="line">- DockerFile</span><br><span class="line"></span><br><span class="line"> ```dockerfile</span><br><span class="line"> #mydockerfile</span><br><span class="line"> </span><br><span class="line"> FROM centos:7</span><br><span class="line"> MAINTAINER yio&lt;3226314806@qq.com&gt;</span><br><span class="line"> </span><br><span class="line"> ENV MYPATH /usr/local</span><br><span class="line"> WORKDIR $MYPATH</span><br><span class="line"> </span><br><span class="line"> RUN yum -y install vim</span><br><span class="line"> RUN yum -y install net-tools</span><br><span class="line"> </span><br><span class="line"> EXPOSE 80,3310</span><br><span class="line"> </span><br><span class="line"> CMD echo $MYPATH</span><br><span class="line"> CMD echo &quot;===end===&quot;</span><br><span class="line"> CMD /bin/bash</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li><p>通过这个文件构建镜像</p><p><code>docker build -f mydockerfile -t mycentos:0.1 .</code></p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090102421.png" alt="image-20220717220432980"></p></li></ul><p>​<code>docker run -it mycentos:0.1</code></p><p>​<img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090102422.png" alt="image-20220717220755678"></p><ul><li><p>看一眼官方的mysql是怎么做的</p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090102424.png" alt="image-20220717221348444"></p></li></ul><blockquote><p>Dockerfile制作tomcat镜像</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> yio&lt;<span class="number">3226314806</span>@qq.com&gt;</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> readme.txt /usr/local/readme.txt</span></span><br><span class="line"><span class="comment">#添加 并解压</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> jdk-8u11-linux-x64.tar.gz /usr/local</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> apache-tomcat-9.0.22.tar.gz /usr/local</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install vim</span></span><br><span class="line"><span class="comment">#工作目录</span></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/jdk1.<span class="number">8.0</span>_11</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="keyword">ENV</span> CATALINA_HOME /usr/local/apache-tomcat-<span class="number">9.0</span>.<span class="number">22</span></span><br><span class="line"><span class="keyword">ENV</span> CATALINA_BASH /usr/local/apache-tomcat-<span class="number">9.0</span>.<span class="number">22</span></span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动tomcat</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /usr/local/apache-tomcat-9.0.22/bin/startup.sh &amp;&amp; <span class="built_in">tail</span> -F /usr/local/apache-tomcat-9.0.22/bin/logs/catalina.out</span></span><br><span class="line"><span class="comment">#end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#构建</span></span><br><span class="line">docker build -f Dockerfile -t mytomcat .</span><br><span class="line"><span class="comment">#运行</span></span><br><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -d -p 9090:8080 --name diytomcat -v /home/yio/docker-test/tomcat/test:/usr/local/apache-tomcat-9.0.22/webapps/test -v /home/yio/docker-test/tomcat/logs:/usr/local/apache-tomcat-9.0.22/logs mytomcat</span></span><br><span class="line"><span class="comment">#做了挂载，在本地目录发布项目就可以同步到容器内部了</span></span><br></pre></td></tr></table></figure><h2 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h2><blockquote><p>DockerHub</p></blockquote><ol><li><p><a href="https://hub.docker.com/">https://hub.docker.com/</a> 注册</p></li><li><p>在服务器上登录docker</p><p><code>docker login -u 用户名 -p</code></p></li><li><p>登录之后就可以提交了</p><ul><li><p>先使用<code>docker tag 原镜像名:1.0 用户名/镜像名:1.0</code>将镜像名修改成标准的名字</p></li><li><p>然后使用<code>docker push 用户名/镜像名:1.0</code>提交</p></li></ul></li></ol><h2 id="Docker图"><a href="#Docker图" class="headerlink" title="Docker图"></a>Docker图</h2><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090102425.png" alt="20200913222649722"></p><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090102426.png" alt="20200913223111483"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://docs.docker.com/engine/reference/builder/">Dockerfile reference | Docker Documentation</a></p></li><li><p><a href="https://www.cnblogs.com/sparkdev/p/8461576.html">Dockerfile 中的 CMD 与 ENTRYPOINT - sparkdev - 博客园 (cnblogs.com)</a></p></li><li><p><a href="https://www.runoob.com/docker/docker-dockerfile.html">Docker Dockerfile | 菜鸟教程 (runoob.com)</a></p></li><li><p><a href="http://www.dockerinfo.net/dockerfile%E4%BB%8B%E7%BB%8D">Docker中文文档 Dockerfile介绍-DockerInfo</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker Compose</title>
      <link href="/p/c0e3b7e9.html"/>
      <url>/p/c0e3b7e9.html</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p><a href="https://docs.docker.com/get-started/08_using_compose/">https://docs.docker.com/get-started/08_using_compose/</a></p></blockquote><p>是一个定义和运行多个容器的工具，使用YAML配置文件。Compose是Docker官方的开源项目，需要我们自己安装使用。服务、应用是一个个容器，Compose将关联容器组成一个Project来运行。</p><p>Docker-Compose将所管理的容器分为三层：</p><ul><li>工程（project）：由一组关联的应用容器组成的一个完成业务单元，在docker-compose.yml中定义。即是 Compose的一个配置文件可以解析为一个项目，Compose通过分析指定配置文件，得出配置文件所需完成的所 有容器管理与部署操作。</li><li>服务（service）：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。每个服务都有自己的名 字、使用的镜像、挂载的数据卷、所属的网络、依赖哪些其他服务等等，即以容器为粒度，用户需要Compose 所完成的任务。</li><li>容器(container)</li></ul><p>一个工程当中可包含多个服务，每个服务中定义了容器运行的镜像，参数，依赖。一个服务当中可包括多个容器实例。</p><p>Compose 使用的三个步骤：</p><ul><li>使用 Dockerfile 定义应用程序的环境。</li><li>使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li><li>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L <span class="string">&quot;https://get.daocloud.io/docker/compose/releases/download/v2.6.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span>  -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></li><li><p>授权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@io bin]<span class="comment"># chmod +x docker-compose </span></span><br><span class="line">[root@io bin]<span class="comment"># docker-compose version</span></span><br><span class="line">Docker Compose version v2.6.1</span><br></pre></td></tr></table></figure></li><li><p>体验</p><ul><li><p><strong>准备</strong></p><p>创建一个测试目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> composetest</span><br><span class="line">$ <span class="built_in">cd</span> composetest</span><br></pre></td></tr></table></figure><p>在测试目录中创建一个名为 app.py 的文件，并复制粘贴以下内容：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment">#host 域名</span></span><br><span class="line">cache = redis.Redis(host=<span class="string">&#x27;redis&#x27;</span>, port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hit_count</span>():</span><br><span class="line">    retries = <span class="number">5</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> cache.incr(<span class="string">&#x27;hits&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> redis.exceptions.ConnectionError <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="keyword">if</span> retries == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> exc</span><br><span class="line">            retries -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    count = get_hit_count()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World! I have been seen &#123;&#125; times.\n&#x27;</span>.<span class="built_in">format</span>(count)</span><br></pre></td></tr></table></figure><p>在此示例中，redis 是应用程序网络上的 redis 容器的主机名，该主机使用的端口为 6379。</p><p>在 composetest 目录中创建另一个名为 <strong>requirements.txt</strong> 的文件，内容如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flask</span><br><span class="line">redis</span><br></pre></td></tr></table></figure></li><li><h3 id="创建Dockerfile文件"><a href="#创建Dockerfile文件" class="headerlink" title="创建Dockerfile文件"></a><strong>创建Dockerfile文件</strong></h3><p>在 composetest 目录中，创建一个名为 <strong>Dockerfile</strong> 的文件，内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>-alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /code</span></span><br><span class="line"><span class="keyword">ENV</span> FLASK_APP app.py</span><br><span class="line"><span class="keyword">ENV</span> FLASK_RUN_HOST <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --no-cache gcc musl-dev linux-headers</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>]</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Dockerfile 内容解释：</strong></p><ul><li><p><strong>FROM python:3.7-alpine</strong>: 从 Python 3.7 映像开始构建镜像。</p></li><li><p><strong>WORKDIR &#x2F;code</strong>: 将工作目录设置为 &#x2F;code。</p></li><li><pre><code>ENV FLASK_APP app.pyENV FLASK_RUN_HOST 0.0.0.0<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  设置 flask 命令使用的环境变量。</span><br><span class="line"></span><br><span class="line">- **RUN apk add --no-cache gcc musl-dev linux-headers**: 安装 gcc，以便诸如 MarkupSafe 和 SQLAlchemy 之类的 Python 包可以编译加速。</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  COPY requirements.txt requirements.txt</span><br><span class="line">  RUN pip install -r requirements.txt</span><br></pre></td></tr></table></figure>复制 requirements.txt 并安装 Python 依赖项。</code></pre></li><li><p><strong>COPY . .</strong>: 将 . 项目中的当前目录复制到 . 镜像中的工作目录。</p></li><li><p><strong>CMD [“flask”, “run”]</strong>: 容器提供默认的执行命令为：flask run。</p></li></ul></blockquote></li><li><h3 id="创建-docker-compose-yml"><a href="#创建-docker-compose-yml" class="headerlink" title="创建 docker-compose.yml"></a>创建 docker-compose.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yaml 配置</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:alpine&quot;</span></span><br></pre></td></tr></table></figure><p>该 Compose 文件定义了两个服务：web 和 redis。</p><ul><li><strong>web</strong>：该 web 服务使用从 Dockerfile 当前目录中构建的镜像。然后，它将容器和主机绑定到暴露的端口 5000。此示例服务使用 Flask Web 服务器的默认端口 5000 。</li><li><strong>redis</strong>：该 redis 服务使用 Docker Hub 的公共 Redis 映像。</li></ul></li><li><h3 id="使用-Compose-命令构建和运行您的应用"><a href="#使用-Compose-命令构建和运行您的应用" class="headerlink" title="使用 Compose 命令构建和运行您的应用"></a>使用 Compose 命令构建和运行您的应用</h3><p>在测试目录中，执行以下命令来启动应用程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>如果你想在后台执行该服务可以加上 <strong>-d</strong> 参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>查看结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@io yio]<span class="comment"># curl localhost:5000</span></span><br><span class="line">Hello World! I have been seen 13 <span class="built_in">times</span>.</span><br></pre></td></tr></table></figure><p>关闭服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose down</span><br></pre></td></tr></table></figure></li><li><h3 id="查看一下网络"><a href="#查看一下网络" class="headerlink" title="查看一下网络"></a>查看一下网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect composetest_default</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090103966.png" alt="image-20220719212835052"></p></li></ul></li></ol><h2 id="YAML规则"><a href="#YAML规则" class="headerlink" title="YAML规则"></a>YAML规则</h2><blockquote><p><a href="https://www.runoob.com/docker/docker-compose.html">菜鸟教程yyds</a></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3层</span></span><br><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;&#x27;</span> <span class="comment">#版本</span></span><br><span class="line"><span class="attr">service:</span> <span class="comment">#服务</span></span><br><span class="line"><span class="attr">service_name1:</span> <span class="comment">#服务名 </span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span> <span class="comment">#指定为构建镜像上下文路径：例如 webapp 服务，指定为从上下文                #路径 ./dir/Dockerfile 所构建的镜像</span></span><br><span class="line">   <span class="comment">#或者，作为具有在上下文指定的路径context的对象，以及可选的                #Dockerfile ；添加构建参数，这是只能在构建过程中访问的环境                #变量args；labels：设置构建镜像的标签</span></span><br><span class="line">   <span class="comment">#target：多层构建，可以指定构建哪一层</span></span><br><span class="line">    <span class="attr">images:</span> <span class="comment">#镜像</span></span><br><span class="line">    <span class="attr">depends on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">service_name2</span> <span class="comment"># 先启动</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">service_name3</span></span><br><span class="line">    <span class="attr">volumes:</span>  <span class="comment">#挂载</span></span><br><span class="line">    <span class="attr">network:</span>  <span class="comment">#网络</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">    <span class="attr">deploy:</span>   <span class="comment">#部署</span></span><br><span class="line">    <span class="attr">replicas:</span> <span class="number">6</span>  <span class="comment">#副本</span></span><br><span class="line">    <span class="string">·····</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">MYSQL_HOST:</span> <span class="string">mysql</span></span><br><span class="line">       <span class="attr">MYSQL_USER:</span> <span class="string">root</span></span><br><span class="line">       <span class="attr">MYSQL_PASSWORD:</span> <span class="string">secret</span></span><br><span class="line">       <span class="attr">MYSQL_DB:</span> <span class="string">todos</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;8080&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;3000&#x27;</span></span><br><span class="line">    </span><br><span class="line"> <span class="attr">service_name2:</span> <span class="comment">#服务名    </span></span><br><span class="line">     </span><br><span class="line">     <span class="attr">service_name3:</span> <span class="comment">#服务名 </span></span><br><span class="line">     </span><br><span class="line">     <span class="attr">service_name4:</span> <span class="comment">#服务名</span></span><br><span class="line">     </span><br><span class="line"><span class="attr">volumes:</span> <span class="comment">#项目挂载</span></span><br></pre></td></tr></table></figure><p>多看多想，看官网，开源项目</p><h3 id="一键部署WP博客"><a href="#一键部署WP博客" class="headerlink" title="一键部署WP博客"></a>一键部署WP博客</h3><blockquote><p><a href="https://docs.docker.com/samples/wordpress/">https://docs.docker.com/samples/wordpress/</a></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="comment"># We use a mariadb image which supports both amd64 &amp; arm64 architecture</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb:latest</span></span><br><span class="line">    <span class="comment"># If you really want to use MySQL, uncomment the following line</span></span><br><span class="line">    <span class="comment">#image: mysql:8.0.27</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;--default-authentication-plugin=mysql_native_password&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db_data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=123456</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=wordpress</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=wordpress</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=123</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">33060</span></span><br><span class="line">  <span class="attr">wordpress:</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wordpress:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_HOST=db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_USER=wordpress</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_PASSWORD=123</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_NAME=wordpress</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db_data:</span></span><br></pre></td></tr></table></figure><p>##Docker Swarm</p><blockquote><p><a href="https://docs.docker.com/engine/swarm/">Docker Swarm</a></p></blockquote><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090103967.png" alt="image-20220719225931176"></h3><p>如下图所示，swarm 集群由管理节点（manager）和工作节点（work node）构成，<code>A given Docker host can be a manager, a worker, or perform both roles</code>，如果一个Worker挂掉了，这个Worker中的task就会被交给其他的Worker执行，每个task都不是以一个独立的容器运行的。</p><ul><li><strong>swarm mananger</strong>：负责整个集群的管理工作包括集群配置、服务管理等所有跟集群有关的工作，manage node也可以执行服务，但是可以自己配置它只运行管理工作。</li><li><strong>worker node</strong>：即图中的 available node，主要负责运行相应的服务来执行任务（task）。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/iuning/meowimg@main/img/202302090103968.png" alt="img"></p><p>一些优点：Swarm支持我们自定义服务的配置，并且自动生效。集群中的node仍然可以运行一个独立的容器，Swarm中的容器<strong>只</strong>会被Swarm Manager管理控制，这是与独立的容器之间的区别。</p><p>###Raft一致性协议</p><blockquote><p>Raft协议是一种基于日志复制的一致性算法，通过选举领袖的方式来实现的。</p><p><a href="https://link.zhihu.com/?target=https://web.stanford.edu/~ouster/cgi-bin/papers/raft-atc14">论文</a></p></blockquote><p>基本概念：</p><ul><li><p>复制状态机(Replicated state machines)</p><p>将集群中的每个服务器看做一个状态机, 它们接收外部的指令, 进行状态的改变。只要初始状态和接收到的指令是确定的, 那么它任意时刻的状态也是确定的, 这样以来, 所谓保持分布式一致性即是保证集群中所有状态机的状态一致性</p></li><li><p>领导人(leader)、跟随者(follower) 和 候选人(candidate)</p><p>raft 将所有服务器结点划分为 3 个互不相交的子集, 任何一个结点都隶属于某一个集合, 其中地位最高的结点称为领导人(leader), 它负责接收来自客户端的调用, 组织日志复制给其它结点, 统筹管理整个计算机集群, raft 保证集群中在任意时刻至多有一个领导人, 跟随者(follower)接收来自领导人(leader)的复制日志, 按照领导人(leader)的要求进行相应的动作。领导人(leader)持续地向集群中的所有其它结点发送心跳包, 以此宣告“你们的皇帝还活着”。一旦跟随者(follower)在给定的时间内没有收到来自领导人(follower)的心跳包, 它便认为领导人出了故障, 于是转变自己的身份为候选人(candidate)进行领导人的竞选。</p></li><li><p>任期(term)</p><p>raft 将系统时间划分为一个个逻辑段, 每个逻辑段的时间长度是不一致的, 可以是任意长度, <strong>每一个逻辑段称为一个任期(term)</strong>, raft 对每一个任期都设置一个整型编号, 称为任期号（类似皇帝的年号或者说最后的庙号）, 每一个任期可以进一步划分为两个子段, 其中第一个子段是选举期, 第二个子段是任职期, 选举期将竞选产生集群的领导人, 若领导人选举成功, 则进入了任职期, 在任职期内只要领导人持续保持健康状态(即持续不间断地向其他跟随者发送心跳包), 则这个时期可以无限期地持续, 当然在 raft 中选举不一定都是成功的, 可能存在某个 term 中的选举期没有任何候选人胜出, 这样 raft 会进行下一个 term, 重新进行选举, 直到有新的领导人胜出, 从而进入任职期,  raft 采用了特别的机制来尽可能地避免一个 term 中没有任何候选人竞选成功的情形出现。</p></li><li><p>日志(log)与日志复制(log replication)</p><p>raft 将集群中的所有服务器看做若干个状态机, 状态机接收指令进行状态的变更, <strong>在 raft 协议中, 指令是以日志的形式的传递的</strong>, 虽然集群中有N个结点, 但只有一个结点(领导人)接收客户端的请求, 其它所有结点接收来自领导人的复制日志(Replicated log), 进行解析、和执行, 从而进行状态的变更, 所有服务器结点按序执行相同的日志(指令), 从而保持状态一致性。（Hadoop的集群）</p></li><li><p>日志提交(commit)</p><p>领导人在接收到客户端请求之后, 会产生一个相应的日志项(log entry), 日志项中包含了指令, 领导人不会立即执行这个指令, 它首先会进行日志项复制, 当日志项被成功地复制到集群中的大多数结点（超多半数，一半以上不包括一半）后, 领导人会提交(commit)这个日志项, 并执行其中的指令(即将该日志应用(apply)到状态机中)</p></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>Docker Machine 创建Docker主机</p><ul><li><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/machine/releases/download/v0.13.0/docker-machine-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-machine</span><br><span class="line">$ sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-machine</span><br></pre></td></tr></table></figure></li><li><p>创建四个主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-machine create -d virtualbox manager1 &amp;&amp; </span><br><span class="line">docker-machine create -d virtualbox manager2 &amp;&amp; </span><br><span class="line">docker-machine create -d virtualbox worker1 &amp;&amp; </span><br><span class="line">docker-machine create -d virtualbox worker2</span><br></pre></td></tr></table></figure></li><li><p>查看主机信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine <span class="built_in">ls</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Docker Swarm 配置集群节点</p><ul><li><p>创建管理节点（初始化）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在manager1主机上，创建一个 Docker Swarm 管理节点（初始化集群的时候，会自动把当前节点设置为管理节点）</span></span><br><span class="line">docker-machine ssh manager1 <span class="string">&quot;docker swarm init --advertise-addr 192.168.99.100&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>创建工作节点并加入到集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">docker-machine ssh worker1 <span class="string">&quot;docker swarm join --token SWMTKN-1-5uwpqibnvmho1png8zmhcw8274yanohee32jyrcjlait9djhsk-envtxo4dl6df2ar3qldcccfdg 192.168.99.100:2377&quot;</span></span><br><span class="line">This node joined a swarm as a worker.</span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">docker-machine ssh worker2 <span class="string">&quot;docker swarm join --token SWMTKN-1-5uwpqibnvmho1png8zmhcw8274yanohee32jyrcjlait9djhsk-envtxo4dl6df2ar3qldcccfdg 192.168.99.100:2377&quot;</span></span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure></li><li><p>另一个管理节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先在manager1主机上，获取管理节点对应的token，然后再配置为管理节点</span></span><br><span class="line">[user]docker-machine ssh manager1 <span class="string">&quot;docker swarm join-token manager&quot;</span></span><br><span class="line">+To add a manager to this swarm, run the +following <span class="built_in">command</span>:</span><br><span class="line">+</span><br><span class="line">+    docker swarm <span class="built_in">join</span> --token SWMTKN-1-5uwpqibnvmho1png8zmhcw8274yanohee32jyrcjlait9djhsk-0koz1b98sco8r5cn3g61eahnu 192.168.99.100:2377</span><br><span class="line"></span><br><span class="line">[user] docker-machine ssh manager2 <span class="string">&quot;docker swarm join --token SWMTKN-1-5uwpqibnvmho1png8zmhcw8274yanohee32jyrcjlait9djhsk-0koz1b98sco8r5cn3g61eahnu 192.168.99.100:2377&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>查看集群信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入manager1内</span></span><br><span class="line">[user]docker node <span class="built_in">ls</span></span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS</span><br><span class="line">n0ub7dpn90rxjq97dr0g8we0w *   manager1            Ready               Active              Leader</span><br><span class="line">t4cy67qp0bf2spgabsutwxnzt     manager2            Ready               Active              Reachable</span><br><span class="line">if0kmzp4ww3oy57y7cha7v36t     worker1             Ready               Active              </span><br><span class="line">jgg61cujzaeb3du5796fm0x2g     worker2             Ready               Active       </span><br><span class="line"><span class="comment">#Leader表示领导者，Reachable表示候选人，头一挂掉它就顶上去了，可以不指定，会选举。</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Docker Service 部署单个集群服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --replicas 4  表示四个副本 实际上这个副本可以更多 每个容器中可以多跑几个服务来分配</span></span><br><span class="line">docker service create --replicas 4 -p 8088:80 --name nginx 192.168.99.1:5000/nginx:latest</span><br><span class="line"></span><br><span class="line"><span class="comment">#此时四个docker任意一个ip都可以访问服务</span></span><br><span class="line"><span class="comment">#也可以手动设置实例个数</span></span><br><span class="line">docker service scale nginx=4</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#查看服务</span></span><br><span class="line">$ docker service <span class="built_in">ls</span></span><br><span class="line">ID                  NAME                MODE                REPLICAS            IMAGE                            PORTS</span><br><span class="line">ap8h8srb8yh3        nginx               replicated          4/4                 192.168.99.1:5000/nginx:latest   *:8080-&gt;8080/tcp</span><br><span class="line"></span><br><span class="line">$ docker service ps nginx</span><br><span class="line">ID                  NAME                IMAGE                            NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS</span><br><span class="line">l2rdrwzs5zog        nginx.1             192.168.99.1:5000/nginx:latest   manager1            Running             Running about a minute ago                       </span><br><span class="line">vsfczzbwanx3        nginx.2             192.168.99.1:5000/nginx:latest   manager2            Running             Running about a minute ago                           </span><br><span class="line">qtbgw5h6dsi9        nginx.3             192.168.99.1:5000/nginx:latest   worker              Running             Running about a minute ago                           </span><br><span class="line">za2ejnvb3n6z        nginx.4             192.168.99.1:5000/nginx:latest   worker2             Running             Running about a minute ago</span><br></pre></td></tr></table></figure></li><li><p>Docker Stack 部署多个集群服务</p><blockquote><p>以后可以使用k8s了</p></blockquote><p>使用<code>docker stack</code>进行多服务编排部署，使用的同样是<code>docker-compose.yml</code>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="number">192.168</span><span class="number">.99</span><span class="number">.1</span><span class="string">:5000/nginx:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8088</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">visualizer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="number">192.168</span><span class="number">.99</span><span class="number">.1</span><span class="string">:5000/dockersamples/visualizer:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span>]</span><br><span class="line"></span><br><span class="line">  <span class="attr">portainer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="number">192.168</span><span class="number">.99</span><span class="number">.1</span><span class="string">:5000/portainer/portainer:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span>]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#部署</span></span><br><span class="line"> docker stack deploy -c docker-compose.yml deploy-demo</span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">docker stack <span class="built_in">ls</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#去浏览器看</span></span><br><span class="line">http://192.168.99.100:8080/</span><br><span class="line">http://192.168.99.100:9000/</span><br></pre></td></tr></table></figure></li><li><p>常用命令</p></li></ol><ul><li><p><code>docker-machine</code></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker-machine create</td><td>创建一个 Docker 主机（常用<code>-d virtualbox</code>）</td></tr><tr><td>docker-machine ls</td><td>查看所有的 Docker 主机</td></tr><tr><td>docker-machine ssh</td><td>SSH 到主机上执行命令</td></tr><tr><td>docker-machine env</td><td>显示连接到某个主机需要的环境变量</td></tr><tr><td>docker-machine inspect</td><td>输出主机更多信息</td></tr><tr><td>docker-machine kill</td><td>停止某个主机</td></tr><tr><td>docker-machine restart</td><td>重启某台主机</td></tr><tr><td>docker-machine rm</td><td>删除某台主机</td></tr><tr><td>docker-machine scp</td><td>在主机之间复制文件</td></tr><tr><td>docker-machine start</td><td>启动一个主机</td></tr><tr><td>docker-machine status</td><td>查看主机状态</td></tr><tr><td>docker-machine stop</td><td>停止一个主机</td></tr></tbody></table></li><li><p><code>docker swarm</code></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker swarm init</td><td>初始化集群</td></tr><tr><td>docker swarm join-token worker</td><td>查看工作节点的 token</td></tr><tr><td>docker swarm join-token manager</td><td>查看管理节点的 token</td></tr><tr><td>docker swarm join</td><td>加入集群中</td></tr></tbody></table></li><li><p><code>docker node</code></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker node ls</td><td>查看所有集群节点</td></tr><tr><td>docker node rm</td><td>删除某个节点（<code>-f</code>强制删除）</td></tr><tr><td>docker node inspect</td><td>查看节点详情</td></tr><tr><td>docker node demote</td><td>节点降级，由管理节点降级为工作节点</td></tr><tr><td>docker node promote</td><td>节点升级，由工作节点升级为管理节点</td></tr><tr><td>docker node update</td><td>更新节点</td></tr><tr><td>docker node ps</td><td>查看节点中的 Task 任务</td></tr></tbody></table></li><li><p><code>docker service</code></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker service create</td><td>部署服务</td></tr><tr><td>docker service inspect</td><td>查看服务详情</td></tr><tr><td>docker service logs</td><td>查看某个服务日志</td></tr><tr><td>docker service ls</td><td>查看所有服务详情</td></tr><tr><td>docker service rm</td><td>删除某个服务（<code>-f</code>强制删除）</td></tr><tr><td>docker service scale</td><td>设置某个服务个数</td></tr><tr><td>docker service update</td><td>更新某个服务</td></tr></tbody></table></li><li><p><code>docker stack</code></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker stack deploy</td><td>部署新的堆栈或更新现有堆栈</td></tr><tr><td>docker stack ls</td><td>列出现有堆栈</td></tr><tr><td>docker stack ps</td><td>列出堆栈中的任务</td></tr><tr><td>docker stack rm</td><td>删除堆栈</td></tr><tr><td>docker stack services</td><td>列出堆栈中的服务</td></tr><tr><td>docker stack down</td><td>移除某个堆栈（不会删除数据）</td></tr></tbody></table></li></ul><blockquote><p><code>docker secret</code> <code>docker config</code>·····</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker相关</title>
      <link href="/p/316feddf.html"/>
      <url>/p/316feddf.html</url>
      
        <content type="html"><![CDATA[<h2 id="将docker装入指定文件夹"><a href="#将docker装入指定文件夹" class="headerlink" title="将docker装入指定文件夹"></a>将docker装入指定文件夹</h2><p>修改配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;graph&quot;</span><span class="punctuation">:</span><span class="string">&quot;/opt/docker&quot;</span> <span class="comment">//指定文件夹</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后安装即可</p><h2 id="使用普通用户权限执行docker"><a href="#使用普通用户权限执行docker" class="headerlink" title="使用普通用户权限执行docker"></a>使用普通用户权限执行docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建docker组</span></span><br><span class="line">sudo groupadd docker</span><br><span class="line"><span class="comment">#添加ithing进入docker组</span></span><br><span class="line">sudo gpasswd -a user docker</span><br><span class="line"><span class="comment">#重启docker服务</span></span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"><span class="comment">#接下来就可以使用你添加的用户（user）使用docker命令了</span></span><br></pre></td></tr></table></figure><p>在启动docker后生成的docker目录属于root，普通用户无法访问。</p><p>直接修改文件权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> user:user docker</span><br></pre></td></tr></table></figure><h2 id="安装Portainer"><a href="#安装Portainer" class="headerlink" title="安装Portainer"></a>安装Portainer</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull portainer/portainer-ce</span><br><span class="line">docker run -d  --name portainer -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock --restart always portainer/portainer-ce</span><br></pre></td></tr></table></figure><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apk add docker-compose</span><br><span class="line"><span class="comment">#在有docker-compose.yml的目录下执行以下指令</span></span><br><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure><p><code>docker-compose.yml</code>小例子</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">dashdot:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">dashdot</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;1001:3001&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;/:/mnt/host:ro&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DASHDOT_ENABLE_CPU_TEMPS=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DASHDOT_ENABLE_STORAGE_SPLIT_VIEW=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DASHDOT_ALWAYS_SHOW_PERCENTAGES=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DASHDOT_PAGE_TITLE=Redmi2</span> <span class="string">No.1</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;mauricenino/dashdot:latest&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先随便启动一个nginx</span></span><br><span class="line">docker run -d --name nginx nginx</span><br><span class="line"><span class="comment">#启动容器后，其内部会生成一个nginx的配置文件，将其复制到本地对应文件夹中</span></span><br><span class="line">docker <span class="built_in">cp</span> nginx:/etc/nginx/nginx.conf <span class="variable">$PWD</span>/</span><br><span class="line"><span class="comment">#然后就可以删除这个容器了</span></span><br><span class="line">docker container stop nginx</span><br><span class="line">docker container <span class="built_in">rm</span> nginx</span><br></pre></td></tr></table></figure><p>部署容器</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">1008</span><span class="string">:80</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">1443</span><span class="string">:443</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/home/user/Disk/nginx/www/public:/usr/share/nginx/html</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/home/user/Disk/nginx/logs:/var/log/nginx</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/home/user/Disk/nginx/conf:/etc/nginx/conf.d/</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">NGINX_PORT=80</span></span><br><span class="line">  <span class="attr">privileged:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d<span class="comment">#启动容器</span></span><br></pre></td></tr></table></figure><p><code>public</code>中需要存在<code>index.html</code>文件否则会出现403错误:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>loveHeart<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://zhouql.vip/images/心.png&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">canvas</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;pinkboard&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> settings = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">particles</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">length</span>: <span class="number">500</span>, </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">duration</span>: <span class="number">2</span>, </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">velocity</span>: <span class="number">100</span>, </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">effect</span>: -<span class="number">0.75</span>, </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">size</span>: <span class="number">32</span>, </span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        (<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">var</span> b = <span class="number">0</span>; <span class="keyword">var</span> c = [<span class="string">&quot;ms&quot;</span>, <span class="string">&quot;moz&quot;</span>, <span class="string">&quot;webkit&quot;</span>, <span class="string">&quot;o&quot;</span>]; <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">0</span>; a &lt; c.<span class="property">length</span> &amp;&amp; !<span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span>; ++a) &#123; <span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span> = <span class="variable language_">window</span>[c[a] + <span class="string">&quot;RequestAnimationFrame&quot;</span>]; <span class="variable language_">window</span>.<span class="property">cancelAnimationFrame</span> = <span class="variable language_">window</span>[c[a] + <span class="string">&quot;CancelAnimationFrame&quot;</span>] || <span class="variable language_">window</span>[c[a] + <span class="string">&quot;CancelRequestAnimationFrame&quot;</span>] &#125; <span class="keyword">if</span> (!<span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span>) &#123; <span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span> = <span class="keyword">function</span> (<span class="params">h, e</span>) &#123; <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(); <span class="keyword">var</span> f = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, <span class="number">16</span> - (d - b)); <span class="keyword">var</span> g = <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="title function_">h</span>(d + f) &#125;, f); b = d + f; <span class="keyword">return</span> g &#125; &#125; <span class="keyword">if</span> (!<span class="variable language_">window</span>.<span class="property">cancelAnimationFrame</span>) &#123; <span class="variable language_">window</span>.<span class="property">cancelAnimationFrame</span> = <span class="keyword">function</span> (<span class="params">d</span>) &#123; <span class="built_in">clearTimeout</span>(d) &#125; &#125; &#125;());</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> <span class="title class_">Point</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">Point</span>(<span class="params">x, y</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">x</span> = (<span class="keyword">typeof</span> x !== <span class="string">&#x27;undefined&#x27;</span>) ? x : <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">y</span> = (<span class="keyword">typeof</span> y !== <span class="string">&#x27;undefined&#x27;</span>) ? y : <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Point</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">clone</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="variable language_">this</span>.<span class="property">x</span>, <span class="variable language_">this</span>.<span class="property">y</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Point</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">length</span> = <span class="keyword">function</span> (<span class="params">length</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="keyword">typeof</span> length == <span class="string">&#x27;undefined&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="variable language_">this</span>.<span class="property">x</span> * <span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span> * <span class="variable language_">this</span>.<span class="property">y</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">normalize</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">x</span> *= length;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">y</span> *= length;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Point</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">normalize</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> length = <span class="variable language_">this</span>.<span class="title function_">length</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">x</span> /= length;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">y</span> /= length;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="title class_">Point</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> <span class="title class_">Particle</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">Particle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">position</span> = <span class="keyword">new</span> <span class="title class_">Point</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">velocity</span> = <span class="keyword">new</span> <span class="title class_">Point</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">acceleration</span> = <span class="keyword">new</span> <span class="title class_">Point</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Particle</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">initialize</span> = <span class="keyword">function</span> (<span class="params">x, y, dx, dy</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">x</span> = x;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span> = y;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">velocity</span>.<span class="property">x</span> = dx;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">velocity</span>.<span class="property">y</span> = dy;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">acceleration</span>.<span class="property">x</span> = dx * settings.<span class="property">particles</span>.<span class="property">effect</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">acceleration</span>.<span class="property">y</span> = dy * settings.<span class="property">particles</span>.<span class="property">effect</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Particle</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">update</span> = <span class="keyword">function</span> (<span class="params">deltaTime</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">x</span> += <span class="variable language_">this</span>.<span class="property">velocity</span>.<span class="property">x</span> * deltaTime;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span> += <span class="variable language_">this</span>.<span class="property">velocity</span>.<span class="property">y</span> * deltaTime;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">velocity</span>.<span class="property">x</span> += <span class="variable language_">this</span>.<span class="property">acceleration</span>.<span class="property">x</span> * deltaTime;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">velocity</span>.<span class="property">y</span> += <span class="variable language_">this</span>.<span class="property">acceleration</span>.<span class="property">y</span> * deltaTime;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">age</span> += deltaTime;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Particle</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">draw</span> = <span class="keyword">function</span> (<span class="params">context, image</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">function</span> <span class="title function_">ease</span>(<span class="params">t</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> (--t) * t * t + <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> size = image.<span class="property">width</span> * <span class="title function_">ease</span>(<span class="variable language_">this</span>.<span class="property">age</span> / settings.<span class="property">particles</span>.<span class="property">duration</span>);</span></span><br><span class="line"><span class="language-javascript">                context.<span class="property">globalAlpha</span> = <span class="number">1</span> - <span class="variable language_">this</span>.<span class="property">age</span> / settings.<span class="property">particles</span>.<span class="property">duration</span>;</span></span><br><span class="line"><span class="language-javascript">                context.<span class="title function_">drawImage</span>(image, <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">x</span> - size / <span class="number">2</span>, <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span> - size / <span class="number">2</span>, size, size);</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="title class_">Particle</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> <span class="title class_">ParticlePool</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> particles,</span></span><br><span class="line"><span class="language-javascript">                firstActive = <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">                firstFree = <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">                duration = settings.<span class="property">particles</span>.<span class="property">duration</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">ParticlePool</span>(<span class="params">length</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// create and populate particle pool</span></span></span><br><span class="line"><span class="language-javascript">                particles = <span class="keyword">new</span> <span class="title class_">Array</span>(length);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; particles.<span class="property">length</span>; i++)</span></span><br><span class="line"><span class="language-javascript">                    particles[i] = <span class="keyword">new</span> <span class="title class_">Particle</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">ParticlePool</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">x, y, dx, dy</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                particles[firstFree].<span class="title function_">initialize</span>(x, y, dx, dy);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// handle circular queue</span></span></span><br><span class="line"><span class="language-javascript">                firstFree++;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (firstFree == particles.<span class="property">length</span>) firstFree = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (firstActive == firstFree) firstActive++;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (firstActive == particles.<span class="property">length</span>) firstActive = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">ParticlePool</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">update</span> = <span class="keyword">function</span> (<span class="params">deltaTime</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> i;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// update active particles</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (firstActive &lt; firstFree) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (i = firstActive; i &lt; firstFree; i++)</span></span><br><span class="line"><span class="language-javascript">                        particles[i].<span class="title function_">update</span>(deltaTime);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (firstFree &lt; firstActive) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (i = firstActive; i &lt; particles.<span class="property">length</span>; i++)</span></span><br><span class="line"><span class="language-javascript">                        particles[i].<span class="title function_">update</span>(deltaTime);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; firstFree; i++)</span></span><br><span class="line"><span class="language-javascript">                        particles[i].<span class="title function_">update</span>(deltaTime);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// remove inactive particles</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">while</span> (particles[firstActive].<span class="property">age</span> &gt;= duration &amp;&amp; firstActive != firstFree) &#123;</span></span><br><span class="line"><span class="language-javascript">                    firstActive++;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (firstActive == particles.<span class="property">length</span>) firstActive = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">ParticlePool</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">draw</span> = <span class="keyword">function</span> (<span class="params">context, image</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// draw active particles</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (firstActive &lt; firstFree) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (i = firstActive; i &lt; firstFree; i++)</span></span><br><span class="line"><span class="language-javascript">                        particles[i].<span class="title function_">draw</span>(context, image);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (firstFree &lt; firstActive) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (i = firstActive; i &lt; particles.<span class="property">length</span>; i++)</span></span><br><span class="line"><span class="language-javascript">                        particles[i].<span class="title function_">draw</span>(context, image);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; firstFree; i++)</span></span><br><span class="line"><span class="language-javascript">                        particles[i].<span class="title function_">draw</span>(context, image);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="title class_">ParticlePool</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)();</span></span><br><span class="line"><span class="language-javascript">        (<span class="keyword">function</span> (<span class="params">canvas</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">                particles = <span class="keyword">new</span> <span class="title class_">ParticlePool</span>(settings.<span class="property">particles</span>.<span class="property">length</span>),</span></span><br><span class="line"><span class="language-javascript">                particleRate = settings.<span class="property">particles</span>.<span class="property">length</span> / settings.<span class="property">particles</span>.<span class="property">duration</span>, <span class="comment">// particles/sec</span></span></span><br><span class="line"><span class="language-javascript">                time;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// get point on heart with -PI &lt;= t &lt;= PI</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">pointOnHeart</span>(<span class="params">t</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Point</span>(</span></span><br><span class="line"><span class="language-javascript">                    <span class="number">160</span> * <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="title class_">Math</span>.<span class="title function_">sin</span>(t), <span class="number">3</span>),</span></span><br><span class="line"><span class="language-javascript">                    <span class="number">130</span> * <span class="title class_">Math</span>.<span class="title function_">cos</span>(t) - <span class="number">50</span> * <span class="title class_">Math</span>.<span class="title function_">cos</span>(<span class="number">2</span> * t) - <span class="number">20</span> * <span class="title class_">Math</span>.<span class="title function_">cos</span>(<span class="number">3</span> * t) - <span class="number">10</span> * <span class="title class_">Math</span>.<span class="title function_">cos</span>(<span class="number">4</span> * t) + <span class="number">25</span></span></span><br><span class="line"><span class="language-javascript">                );</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// creating the particle image using a dummy canvas</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> image = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">                    context = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                canvas.<span class="property">width</span> = settings.<span class="property">particles</span>.<span class="property">size</span>;</span></span><br><span class="line"><span class="language-javascript">                canvas.<span class="property">height</span> = settings.<span class="property">particles</span>.<span class="property">size</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// helper function to create the path</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">function</span> <span class="title function_">to</span>(<span class="params">t</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> point = <span class="title function_">pointOnHeart</span>(t);</span></span><br><span class="line"><span class="language-javascript">                    point.<span class="property">x</span> = settings.<span class="property">particles</span>.<span class="property">size</span> / <span class="number">2</span> + point.<span class="property">x</span> * settings.<span class="property">particles</span>.<span class="property">size</span> / <span class="number">350</span>;</span></span><br><span class="line"><span class="language-javascript">                    point.<span class="property">y</span> = settings.<span class="property">particles</span>.<span class="property">size</span> / <span class="number">2</span> - point.<span class="property">y</span> * settings.<span class="property">particles</span>.<span class="property">size</span> / <span class="number">350</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> point;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// create the path</span></span></span><br><span class="line"><span class="language-javascript">                context.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> t = -<span class="title class_">Math</span>.<span class="property">PI</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> point = <span class="title function_">to</span>(t);</span></span><br><span class="line"><span class="language-javascript">                context.<span class="title function_">moveTo</span>(point.<span class="property">x</span>, point.<span class="property">y</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">while</span> (t &lt; <span class="title class_">Math</span>.<span class="property">PI</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    t += <span class="number">0.01</span>; <span class="comment">// baby steps!</span></span></span><br><span class="line"><span class="language-javascript">                    point = <span class="title function_">to</span>(t);</span></span><br><span class="line"><span class="language-javascript">                    context.<span class="title function_">lineTo</span>(point.<span class="property">x</span>, point.<span class="property">y</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                context.<span class="title function_">closePath</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// create the fill</span></span></span><br><span class="line"><span class="language-javascript">                context.<span class="property">fillStyle</span> = <span class="string">&#x27;#ea80b0&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                context.<span class="title function_">fill</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// create the image</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span></span><br><span class="line"><span class="language-javascript">                image.<span class="property">src</span> = canvas.<span class="title function_">toDataURL</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> image;</span></span><br><span class="line"><span class="language-javascript">            &#125;)();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// render that thing!</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// next animation frame</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">requestAnimationFrame</span>(render);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// update time</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> newTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() / <span class="number">1000</span>,</span></span><br><span class="line"><span class="language-javascript">                    deltaTime = newTime - (time || newTime);</span></span><br><span class="line"><span class="language-javascript">                time = newTime;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// clear canvas</span></span></span><br><span class="line"><span class="language-javascript">                context.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// create new particles</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> amount = particleRate * deltaTime;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; amount; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> pos = <span class="title function_">pointOnHeart</span>(<span class="title class_">Math</span>.<span class="property">PI</span> - <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>());</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> dir = pos.<span class="title function_">clone</span>().<span class="title function_">length</span>(settings.<span class="property">particles</span>.<span class="property">velocity</span>);</span></span><br><span class="line"><span class="language-javascript">                    particles.<span class="title function_">add</span>(canvas.<span class="property">width</span> / <span class="number">2</span> + pos.<span class="property">x</span>, canvas.<span class="property">height</span> / <span class="number">2</span> - pos.<span class="property">y</span>, dir.<span class="property">x</span>, -dir.<span class="property">y</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// update and draw particles</span></span></span><br><span class="line"><span class="language-javascript">                particles.<span class="title function_">update</span>(deltaTime);</span></span><br><span class="line"><span class="language-javascript">                particles.<span class="title function_">draw</span>(context, image);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// handle (re-)sizing of the canvas</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">onResize</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                canvas.<span class="property">width</span> = canvas.<span class="property">clientWidth</span>;</span></span><br><span class="line"><span class="language-javascript">                canvas.<span class="property">height</span> = canvas.<span class="property">clientHeight</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">onresize</span> = onResize;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// delay rendering bootstrap</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">onResize</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">render</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">10</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pinkboard&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>conf</code>中使用默认<code>nginx.conf</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen  [::]:80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    fastcgi_index  index.php;</span><br><span class="line">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">    # concurs with nginx&#x27;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ /\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nginx-反向代理hexo"><a href="#nginx-反向代理hexo" class="headerlink" title="nginx 反向代理hexo"></a>nginx 反向代理hexo</h2><ol><li><p>安装git【设置ssh公钥免密登陆可按照百度来，easy】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apk add git</span><br></pre></td></tr></table></figure></li><li><p>创建远程git仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init --bare blog.git</span><br></pre></td></tr></table></figure></li><li><p>配置hooks文件</p><p>在blog.git下的hooks目录下创建<code>post-receive</code>文件，内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git --work-tree=【待上传blog仓库目录】 --git-dir=【自己的目录】/blog.git checkout -f</span><br></pre></td></tr></table></figure></li><li><p>在本地hexo配置文件中添加deploy路径</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    [<span class="string">nickname</span>]<span class="string">:</span> [<span class="string">username</span>]<span class="string">@[yourRemoteIP]:[yourDir]/mygit/blog.git</span></span><br></pre></td></tr></table></figure></li><li><p>访问[yourIP]:1008,即可看见自己的blog</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>洛神赋</title>
      <link href="/p/ba663a52.html"/>
      <url>/p/ba663a52.html</url>
      
        <content type="html"><![CDATA[<p>​黄初三年，余朝京师，还济洛川。古人有言，斯水之神，名曰宓妃。感宋玉对楚王神女之事，遂作斯赋。其辞曰：</p><p>​余从京域，言归东藩。背伊阙，越轘辕，经通谷，陵景山。日既西倾，车殆马烦。尔乃税驾乎蘅皋，秣驷乎芝田，容与乎阳林，流眄乎洛川。于是精移神骇，忽焉思散。俯则末察，仰以殊观，睹一丽人，于岩之畔。乃援御者而告之曰：“尔有觌于彼者乎?彼何人斯?若此之艳也!”御者对曰：“臣闻河洛之神，名曰宓妃。然则君王所见，无乃日乎?其状若何?臣愿闻之。”</p><p>​余告之曰：“其形也，翩若惊鸿，婉若游龙。荣曜秋菊，华茂春松。仿佛兮若轻云之蔽月，飘飘兮若流风之回雪。远而望之，皎若太阳升朝霞;迫而察之，灼若芙蕖出渌波。襛纤得衷，修短合度。肩若削成，腰如约素。延颈秀项，皓质呈露。芳泽无加，铅华弗御。云髻峨峨，修眉联娟。丹唇外朗，皓齿内鲜，明眸善睐，靥辅承权。瑰姿艳逸，仪静体闲。柔情绰态，媚于语言。奇服旷世，骨像应图。披罗衣之璀粲兮，珥瑶碧之华琚。戴金翠之首饰，缀明珠以耀躯。践远游之文履，曳雾绡之轻裾。微幽兰之芳蔼兮，步踟蹰于山隅。于是忽焉纵体，以遨以嬉。左倚采旄，右荫桂旗。壤皓腕于神浒兮，采湍濑之玄芝。</p><p>​余情悦其淑美兮，心振荡而不怡。无良媒以接欢兮，托微波而通辞。愿诚素之先达兮，解玉佩以要之。嗟佳人之信修，羌习礼而明诗。抗琼珶以和予兮，指潜渊而为期。执眷眷之款实兮，惧斯灵之我欺。感交甫之弃言兮，怅犹豫而狐疑。收和颜而静志兮，申礼防以自持。</p><p>​于是洛灵感焉，徙倚彷徨，神光离合，乍阴乍阳。竦轻躯以鹤立，若将飞而未翔。践椒涂之郁烈，步蘅薄而流芳。超长吟以永慕兮，声哀厉而弥长。尔乃众灵杂遢，命俦啸侣，或戏清流，或翔神渚，或采明珠，或拾翠羽。从南湘之二妃，携汉滨之游女。叹匏瓜之无匹兮，咏牵牛之独处。扬轻袿之猗靡兮，翳修袖以延伫。休迅飞凫，飘忽若神，陵波微步，罗袜生尘。动无常则，若危若安。进止难期，若往若还。转眄流精，光润玉颜。含辞未吐，气若幽兰。华容婀娜，令我忘餐。</p><p>​于是屏翳收风，川后静波。冯夷鸣鼓，女娲清歌。腾文鱼以警乘，鸣玉鸾以偕逝。六龙俨其齐首，载云车之容裔，鲸鲵踊而夹毂，水禽翔而为卫。于是越北沚。过南冈，纡素领，回清阳，动朱唇以徐言，陈交接之大纲。恨人神之道殊兮，怨盛年之莫当。抗罗袂以掩涕兮，泪流襟之浪浪。悼良会之永绝兮。哀一逝而异乡。无微情以效爱兮，献江南之明珰。虽潜处于太阳，长寄心于君王。忽不悟其所舍，怅神宵而蔽光。</p><p>​于是背下陵高，足往神留，遗情想像，顾望怀愁。冀灵体之复形，御轻舟而上溯。浮长川而忘返，思绵绵督。夜耿耿而不寐，沾繁霜而至曙。命仆夫而就驾，吾将归乎东路。揽騑辔以抗策，怅盘桓而不能去。</p><blockquote><p>本文作为中文字符格式演示文</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 古诗文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 赋 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
